syntax = "proto3";
package band.tunnel.v1beta1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

import "band/feeds/v1beta1/encoder.proto";
import "band/feeds/v1beta1/feeds.proto";

option go_package            = "github.com/bandprotocol/chain/v3/x/tunnel/types";
option (gogoproto.equal_all) = true;

// TSSRoute represents a route for TSS packets and implements the RouteI interface.
message TSSRoute {
  option (cosmos_proto.implements_interface) = "RouteI";

  // destination_chain_id is the destination chain ID
  string destination_chain_id = 1 [(gogoproto.customname) = "DestinationChainID"];
  // destination_contract_address is the destination contract address
  string destination_contract_address = 2;
  // encoder is the mode of encoding packet data.
  band.feeds.v1beta1.Encoder encoder = 3;
}

// TSSPacketReceipt represents a receipt for a TSS packet and implements the PacketReceiptI interface.
message TSSPacketReceipt {
  option (cosmos_proto.implements_interface) = "PacketReceiptI";

  // signing_id is the signing ID
  uint64 signing_id = 1 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v3/x/bandtss/types.SigningID"
  ];
}

// IBCRoute represents a route for IBC packets and implements the RouteI interface.
message IBCRoute {
  option (cosmos_proto.implements_interface) = "RouteI";

  // channel_id is the IBC channel ID
  string channel_id = 1 [(gogoproto.customname) = "ChannelID"];
}

// IBCPacketReceipt represents a receipt for a IBC packet and implements the PacketReceiptI interface.
message IBCPacketReceipt {
  option (cosmos_proto.implements_interface) = "PacketReceiptI";

  // sequence is representing the sequence of the IBC packet.
  uint64 sequence = 1;
}

// TunnelPricesPacketData represents the IBC packet payload for the tunnel packet.
message TunnelPricesPacketData {
  // tunnel_id is the tunnel ID
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
  // sequence is representing the sequence of the tunnel packet.
  uint64 sequence = 2;
  // prices is the list of prices information from feeds module.
  repeated band.feeds.v1beta1.Price prices = 3 [(gogoproto.nullable) = false];
  // created_at is the timestamp when the packet is created
  int64 created_at = 4;
}

// IBCHookRoute is the type for an IBC hook route
message IBCHookRoute {
  option (cosmos_proto.implements_interface) = "RouteI";

  // channel_id is the IBC channel ID
  string channel_id = 1 [(gogoproto.customname) = "ChannelID"];
  // destination_contract_address is the destination contract address
  string destination_contract_address = 2;
}

// IBCHookPacketReceipt represents a receipt for a IBC hook packet and implements the PacketReceiptI interface.
message IBCHookPacketReceipt {
  option (cosmos_proto.implements_interface) = "PacketContentI";

  // sequence is representing the sequence of the IBC packet.
  uint64 sequence = 1;
}

// RouterRoute is the type for a router route
message RouterRoute {
  option (cosmos_proto.implements_interface) = "RouteI";

  // destination_chain_id is the destination chain ID
  string destination_chain_id = 3 [(gogoproto.customname) = "DestinationChainID"];
  // destination_contract_address is the destination contract address
  string destination_contract_address = 4;
  // destination_gas_limit is the destination gas limit
  uint64 destination_gas_limit = 5;
  // destination_gas_price is the destination gas price
  uint64 destination_gas_price = 6;
}

// RouterPacketReceipt represents a receipt for a Router packet and implements the PacketReceiptI interface.
message RouterPacketReceipt {
  option (cosmos_proto.implements_interface) = "PacketReceiptI";

  // sequence is representing the sequence of the IBC packet.
  uint64 sequence = 1;
}

// HyperlaneStrideRoute represents a route for Hyperlane Stride packets and implements the RouteI interface.
message HyperlaneStrideRoute {
  option (cosmos_proto.implements_interface) = "RouteI";

  // dispatch_dest_domain is the dispatch chain id
  uint64 dispatch_dest_domain = 1;
  // dispatch_recipient_addr is the dispatch recipient address
  string dispatch_recipient_addr = 2;
  // fund is the fund allocated for the Hyperlane protocol fee.
  cosmos.base.v1beta1.Coin fund = 3 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (amino.dont_omitempty)   = true
  ];
}

// HyperlaneStridePacketReceipt represents a receipt for a Hyperlane Stride packet and implements the PacketReceiptI
// interface.
message HyperlaneStridePacketReceipt {
  option (cosmos_proto.implements_interface) = "PacketReceiptI";

  // sequence is representing the sequence of the Hyperlane packet.
  uint64 sequence = 1;
}
