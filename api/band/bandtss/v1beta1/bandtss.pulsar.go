// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bandtssv1beta1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Member           protoreflect.MessageDescriptor
	fd_Member_address   protoreflect.FieldDescriptor
	fd_Member_group_id  protoreflect.FieldDescriptor
	fd_Member_is_active protoreflect.FieldDescriptor
	fd_Member_since     protoreflect.FieldDescriptor
)

func init() {
	file_band_bandtss_v1beta1_bandtss_proto_init()
	md_Member = File_band_bandtss_v1beta1_bandtss_proto.Messages().ByName("Member")
	fd_Member_address = md_Member.Fields().ByName("address")
	fd_Member_group_id = md_Member.Fields().ByName("group_id")
	fd_Member_is_active = md_Member.Fields().ByName("is_active")
	fd_Member_since = md_Member.Fields().ByName("since")
}

var _ protoreflect.Message = (*fastReflection_Member)(nil)

type fastReflection_Member Member

func (x *Member) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Member)(x)
}

func (x *Member) slowProtoReflect() protoreflect.Message {
	mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Member_messageType fastReflection_Member_messageType
var _ protoreflect.MessageType = fastReflection_Member_messageType{}

type fastReflection_Member_messageType struct{}

func (x fastReflection_Member_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Member)(nil)
}
func (x fastReflection_Member_messageType) New() protoreflect.Message {
	return new(fastReflection_Member)
}
func (x fastReflection_Member_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Member
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Member) Descriptor() protoreflect.MessageDescriptor {
	return md_Member
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Member) Type() protoreflect.MessageType {
	return _fastReflection_Member_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Member) New() protoreflect.Message {
	return new(fastReflection_Member)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Member) Interface() protoreflect.ProtoMessage {
	return (*Member)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Member) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Member_address, value) {
			return
		}
	}
	if x.GroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GroupId)
		if !f(fd_Member_group_id, value) {
			return
		}
	}
	if x.IsActive != false {
		value := protoreflect.ValueOfBool(x.IsActive)
		if !f(fd_Member_is_active, value) {
			return
		}
	}
	if x.Since != nil {
		value := protoreflect.ValueOfMessage(x.Since.ProtoReflect())
		if !f(fd_Member_since, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Member) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Member.address":
		return x.Address != ""
	case "band.bandtss.v1beta1.Member.group_id":
		return x.GroupId != uint64(0)
	case "band.bandtss.v1beta1.Member.is_active":
		return x.IsActive != false
	case "band.bandtss.v1beta1.Member.since":
		return x.Since != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Member) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Member.address":
		x.Address = ""
	case "band.bandtss.v1beta1.Member.group_id":
		x.GroupId = uint64(0)
	case "band.bandtss.v1beta1.Member.is_active":
		x.IsActive = false
	case "band.bandtss.v1beta1.Member.since":
		x.Since = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Member) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.bandtss.v1beta1.Member.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "band.bandtss.v1beta1.Member.group_id":
		value := x.GroupId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.Member.is_active":
		value := x.IsActive
		return protoreflect.ValueOfBool(value)
	case "band.bandtss.v1beta1.Member.since":
		value := x.Since
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Member) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Member.address":
		x.Address = value.Interface().(string)
	case "band.bandtss.v1beta1.Member.group_id":
		x.GroupId = value.Uint()
	case "band.bandtss.v1beta1.Member.is_active":
		x.IsActive = value.Bool()
	case "band.bandtss.v1beta1.Member.since":
		x.Since = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Member) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Member.since":
		if x.Since == nil {
			x.Since = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Since.ProtoReflect())
	case "band.bandtss.v1beta1.Member.address":
		panic(fmt.Errorf("field address of message band.bandtss.v1beta1.Member is not mutable"))
	case "band.bandtss.v1beta1.Member.group_id":
		panic(fmt.Errorf("field group_id of message band.bandtss.v1beta1.Member is not mutable"))
	case "band.bandtss.v1beta1.Member.is_active":
		panic(fmt.Errorf("field is_active of message band.bandtss.v1beta1.Member is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Member) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Member.address":
		return protoreflect.ValueOfString("")
	case "band.bandtss.v1beta1.Member.group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.Member.is_active":
		return protoreflect.ValueOfBool(false)
	case "band.bandtss.v1beta1.Member.since":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Member"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Member does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Member) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.bandtss.v1beta1.Member", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Member) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Member) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Member) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Member) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Member)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.GroupId))
		}
		if x.IsActive {
			n += 2
		}
		if x.Since != nil {
			l = options.Size(x.Since)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Member)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Since != nil {
			encoded, err := options.Marshal(x.Since)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.IsActive {
			i--
			if x.IsActive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.GroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GroupId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Member)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Member: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
				}
				x.GroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsActive = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Since == nil {
					x.Since = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Since); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrentGroup             protoreflect.MessageDescriptor
	fd_CurrentGroup_group_id    protoreflect.FieldDescriptor
	fd_CurrentGroup_active_time protoreflect.FieldDescriptor
)

func init() {
	file_band_bandtss_v1beta1_bandtss_proto_init()
	md_CurrentGroup = File_band_bandtss_v1beta1_bandtss_proto.Messages().ByName("CurrentGroup")
	fd_CurrentGroup_group_id = md_CurrentGroup.Fields().ByName("group_id")
	fd_CurrentGroup_active_time = md_CurrentGroup.Fields().ByName("active_time")
}

var _ protoreflect.Message = (*fastReflection_CurrentGroup)(nil)

type fastReflection_CurrentGroup CurrentGroup

func (x *CurrentGroup) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrentGroup)(x)
}

func (x *CurrentGroup) slowProtoReflect() protoreflect.Message {
	mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrentGroup_messageType fastReflection_CurrentGroup_messageType
var _ protoreflect.MessageType = fastReflection_CurrentGroup_messageType{}

type fastReflection_CurrentGroup_messageType struct{}

func (x fastReflection_CurrentGroup_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrentGroup)(nil)
}
func (x fastReflection_CurrentGroup_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrentGroup)
}
func (x fastReflection_CurrentGroup_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentGroup
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrentGroup) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentGroup
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrentGroup) Type() protoreflect.MessageType {
	return _fastReflection_CurrentGroup_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrentGroup) New() protoreflect.Message {
	return new(fastReflection_CurrentGroup)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrentGroup) Interface() protoreflect.ProtoMessage {
	return (*CurrentGroup)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrentGroup) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.GroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GroupId)
		if !f(fd_CurrentGroup_group_id, value) {
			return
		}
	}
	if x.ActiveTime != nil {
		value := protoreflect.ValueOfMessage(x.ActiveTime.ProtoReflect())
		if !f(fd_CurrentGroup_active_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrentGroup) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		return x.GroupId != uint64(0)
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		return x.ActiveTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentGroup) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		x.GroupId = uint64(0)
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		x.ActiveTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrentGroup) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		value := x.GroupId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		value := x.ActiveTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentGroup) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		x.GroupId = value.Uint()
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		x.ActiveTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentGroup) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		if x.ActiveTime == nil {
			x.ActiveTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ActiveTime.ProtoReflect())
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		panic(fmt.Errorf("field group_id of message band.bandtss.v1beta1.CurrentGroup is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrentGroup) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.CurrentGroup.group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.CurrentGroup.active_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.CurrentGroup"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.CurrentGroup does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrentGroup) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.bandtss.v1beta1.CurrentGroup", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrentGroup) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentGroup) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrentGroup) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrentGroup) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrentGroup)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.GroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.GroupId))
		}
		if x.ActiveTime != nil {
			l = options.Size(x.ActiveTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrentGroup)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ActiveTime != nil {
			encoded, err := options.Marshal(x.ActiveTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.GroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GroupId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrentGroup)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentGroup: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentGroup: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
				}
				x.GroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ActiveTime == nil {
					x.ActiveTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ActiveTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Signing_2_list)(nil)

type _Signing_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Signing_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Signing_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Signing_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Signing_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Signing_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Signing_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Signing_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Signing_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Signing                           protoreflect.MessageDescriptor
	fd_Signing_id                        protoreflect.FieldDescriptor
	fd_Signing_fee_per_signer            protoreflect.FieldDescriptor
	fd_Signing_requester                 protoreflect.FieldDescriptor
	fd_Signing_current_group_signing_id  protoreflect.FieldDescriptor
	fd_Signing_incoming_group_signing_id protoreflect.FieldDescriptor
)

func init() {
	file_band_bandtss_v1beta1_bandtss_proto_init()
	md_Signing = File_band_bandtss_v1beta1_bandtss_proto.Messages().ByName("Signing")
	fd_Signing_id = md_Signing.Fields().ByName("id")
	fd_Signing_fee_per_signer = md_Signing.Fields().ByName("fee_per_signer")
	fd_Signing_requester = md_Signing.Fields().ByName("requester")
	fd_Signing_current_group_signing_id = md_Signing.Fields().ByName("current_group_signing_id")
	fd_Signing_incoming_group_signing_id = md_Signing.Fields().ByName("incoming_group_signing_id")
}

var _ protoreflect.Message = (*fastReflection_Signing)(nil)

type fastReflection_Signing Signing

func (x *Signing) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Signing)(x)
}

func (x *Signing) slowProtoReflect() protoreflect.Message {
	mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Signing_messageType fastReflection_Signing_messageType
var _ protoreflect.MessageType = fastReflection_Signing_messageType{}

type fastReflection_Signing_messageType struct{}

func (x fastReflection_Signing_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Signing)(nil)
}
func (x fastReflection_Signing_messageType) New() protoreflect.Message {
	return new(fastReflection_Signing)
}
func (x fastReflection_Signing_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Signing
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Signing) Descriptor() protoreflect.MessageDescriptor {
	return md_Signing
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Signing) Type() protoreflect.MessageType {
	return _fastReflection_Signing_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Signing) New() protoreflect.Message {
	return new(fastReflection_Signing)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Signing) Interface() protoreflect.ProtoMessage {
	return (*Signing)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Signing) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Signing_id, value) {
			return
		}
	}
	if len(x.FeePerSigner) != 0 {
		value := protoreflect.ValueOfList(&_Signing_2_list{list: &x.FeePerSigner})
		if !f(fd_Signing_fee_per_signer, value) {
			return
		}
	}
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_Signing_requester, value) {
			return
		}
	}
	if x.CurrentGroupSigningId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentGroupSigningId)
		if !f(fd_Signing_current_group_signing_id, value) {
			return
		}
	}
	if x.IncomingGroupSigningId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IncomingGroupSigningId)
		if !f(fd_Signing_incoming_group_signing_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Signing) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Signing.id":
		return x.Id != uint64(0)
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		return len(x.FeePerSigner) != 0
	case "band.bandtss.v1beta1.Signing.requester":
		return x.Requester != ""
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		return x.CurrentGroupSigningId != uint64(0)
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		return x.IncomingGroupSigningId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Signing) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Signing.id":
		x.Id = uint64(0)
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		x.FeePerSigner = nil
	case "band.bandtss.v1beta1.Signing.requester":
		x.Requester = ""
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		x.CurrentGroupSigningId = uint64(0)
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		x.IncomingGroupSigningId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Signing) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.bandtss.v1beta1.Signing.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		if len(x.FeePerSigner) == 0 {
			return protoreflect.ValueOfList(&_Signing_2_list{})
		}
		listValue := &_Signing_2_list{list: &x.FeePerSigner}
		return protoreflect.ValueOfList(listValue)
	case "band.bandtss.v1beta1.Signing.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		value := x.CurrentGroupSigningId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		value := x.IncomingGroupSigningId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Signing) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Signing.id":
		x.Id = value.Uint()
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		lv := value.List()
		clv := lv.(*_Signing_2_list)
		x.FeePerSigner = *clv.list
	case "band.bandtss.v1beta1.Signing.requester":
		x.Requester = value.Interface().(string)
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		x.CurrentGroupSigningId = value.Uint()
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		x.IncomingGroupSigningId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Signing) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		if x.FeePerSigner == nil {
			x.FeePerSigner = []*v1beta1.Coin{}
		}
		value := &_Signing_2_list{list: &x.FeePerSigner}
		return protoreflect.ValueOfList(value)
	case "band.bandtss.v1beta1.Signing.id":
		panic(fmt.Errorf("field id of message band.bandtss.v1beta1.Signing is not mutable"))
	case "band.bandtss.v1beta1.Signing.requester":
		panic(fmt.Errorf("field requester of message band.bandtss.v1beta1.Signing is not mutable"))
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		panic(fmt.Errorf("field current_group_signing_id of message band.bandtss.v1beta1.Signing is not mutable"))
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		panic(fmt.Errorf("field incoming_group_signing_id of message band.bandtss.v1beta1.Signing is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Signing) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.Signing.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.Signing.fee_per_signer":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Signing_2_list{list: &list})
	case "band.bandtss.v1beta1.Signing.requester":
		return protoreflect.ValueOfString("")
	case "band.bandtss.v1beta1.Signing.current_group_signing_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.Signing.incoming_group_signing_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.Signing"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.Signing does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Signing) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.bandtss.v1beta1.Signing", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Signing) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Signing) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Signing) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Signing) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Signing)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if len(x.FeePerSigner) > 0 {
			for _, e := range x.FeePerSigner {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentGroupSigningId != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentGroupSigningId))
		}
		if x.IncomingGroupSigningId != 0 {
			n += 1 + runtime.Sov(uint64(x.IncomingGroupSigningId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Signing)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IncomingGroupSigningId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IncomingGroupSigningId))
			i--
			dAtA[i] = 0x28
		}
		if x.CurrentGroupSigningId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentGroupSigningId))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.FeePerSigner) > 0 {
			for iNdEx := len(x.FeePerSigner) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FeePerSigner[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Signing)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Signing: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Signing: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeePerSigner", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeePerSigner = append(x.FeePerSigner, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeePerSigner[len(x.FeePerSigner)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentGroupSigningId", wireType)
				}
				x.CurrentGroupSigningId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentGroupSigningId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IncomingGroupSigningId", wireType)
				}
				x.IncomingGroupSigningId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IncomingGroupSigningId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GroupTransition                        protoreflect.MessageDescriptor
	fd_GroupTransition_signing_id             protoreflect.FieldDescriptor
	fd_GroupTransition_current_group_id       protoreflect.FieldDescriptor
	fd_GroupTransition_current_group_pub_key  protoreflect.FieldDescriptor
	fd_GroupTransition_incoming_group_id      protoreflect.FieldDescriptor
	fd_GroupTransition_incoming_group_pub_key protoreflect.FieldDescriptor
	fd_GroupTransition_status                 protoreflect.FieldDescriptor
	fd_GroupTransition_exec_time              protoreflect.FieldDescriptor
	fd_GroupTransition_is_force_transition    protoreflect.FieldDescriptor
)

func init() {
	file_band_bandtss_v1beta1_bandtss_proto_init()
	md_GroupTransition = File_band_bandtss_v1beta1_bandtss_proto.Messages().ByName("GroupTransition")
	fd_GroupTransition_signing_id = md_GroupTransition.Fields().ByName("signing_id")
	fd_GroupTransition_current_group_id = md_GroupTransition.Fields().ByName("current_group_id")
	fd_GroupTransition_current_group_pub_key = md_GroupTransition.Fields().ByName("current_group_pub_key")
	fd_GroupTransition_incoming_group_id = md_GroupTransition.Fields().ByName("incoming_group_id")
	fd_GroupTransition_incoming_group_pub_key = md_GroupTransition.Fields().ByName("incoming_group_pub_key")
	fd_GroupTransition_status = md_GroupTransition.Fields().ByName("status")
	fd_GroupTransition_exec_time = md_GroupTransition.Fields().ByName("exec_time")
	fd_GroupTransition_is_force_transition = md_GroupTransition.Fields().ByName("is_force_transition")
}

var _ protoreflect.Message = (*fastReflection_GroupTransition)(nil)

type fastReflection_GroupTransition GroupTransition

func (x *GroupTransition) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GroupTransition)(x)
}

func (x *GroupTransition) slowProtoReflect() protoreflect.Message {
	mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GroupTransition_messageType fastReflection_GroupTransition_messageType
var _ protoreflect.MessageType = fastReflection_GroupTransition_messageType{}

type fastReflection_GroupTransition_messageType struct{}

func (x fastReflection_GroupTransition_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GroupTransition)(nil)
}
func (x fastReflection_GroupTransition_messageType) New() protoreflect.Message {
	return new(fastReflection_GroupTransition)
}
func (x fastReflection_GroupTransition_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GroupTransition
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GroupTransition) Descriptor() protoreflect.MessageDescriptor {
	return md_GroupTransition
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GroupTransition) Type() protoreflect.MessageType {
	return _fastReflection_GroupTransition_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GroupTransition) New() protoreflect.Message {
	return new(fastReflection_GroupTransition)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GroupTransition) Interface() protoreflect.ProtoMessage {
	return (*GroupTransition)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GroupTransition) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SigningId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SigningId)
		if !f(fd_GroupTransition_signing_id, value) {
			return
		}
	}
	if x.CurrentGroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentGroupId)
		if !f(fd_GroupTransition_current_group_id, value) {
			return
		}
	}
	if len(x.CurrentGroupPubKey) != 0 {
		value := protoreflect.ValueOfBytes(x.CurrentGroupPubKey)
		if !f(fd_GroupTransition_current_group_pub_key, value) {
			return
		}
	}
	if x.IncomingGroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IncomingGroupId)
		if !f(fd_GroupTransition_incoming_group_id, value) {
			return
		}
	}
	if len(x.IncomingGroupPubKey) != 0 {
		value := protoreflect.ValueOfBytes(x.IncomingGroupPubKey)
		if !f(fd_GroupTransition_incoming_group_pub_key, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_GroupTransition_status, value) {
			return
		}
	}
	if x.ExecTime != nil {
		value := protoreflect.ValueOfMessage(x.ExecTime.ProtoReflect())
		if !f(fd_GroupTransition_exec_time, value) {
			return
		}
	}
	if x.IsForceTransition != false {
		value := protoreflect.ValueOfBool(x.IsForceTransition)
		if !f(fd_GroupTransition_is_force_transition, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GroupTransition) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		return x.SigningId != uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		return x.CurrentGroupId != uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		return len(x.CurrentGroupPubKey) != 0
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		return x.IncomingGroupId != uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		return len(x.IncomingGroupPubKey) != 0
	case "band.bandtss.v1beta1.GroupTransition.status":
		return x.Status != 0
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		return x.ExecTime != nil
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		return x.IsForceTransition != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransition) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		x.SigningId = uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		x.CurrentGroupId = uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		x.CurrentGroupPubKey = nil
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		x.IncomingGroupId = uint64(0)
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		x.IncomingGroupPubKey = nil
	case "band.bandtss.v1beta1.GroupTransition.status":
		x.Status = 0
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		x.ExecTime = nil
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		x.IsForceTransition = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GroupTransition) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		value := x.SigningId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		value := x.CurrentGroupId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		value := x.CurrentGroupPubKey
		return protoreflect.ValueOfBytes(value)
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		value := x.IncomingGroupId
		return protoreflect.ValueOfUint64(value)
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		value := x.IncomingGroupPubKey
		return protoreflect.ValueOfBytes(value)
	case "band.bandtss.v1beta1.GroupTransition.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		value := x.ExecTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		value := x.IsForceTransition
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransition) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		x.SigningId = value.Uint()
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		x.CurrentGroupId = value.Uint()
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		x.CurrentGroupPubKey = value.Bytes()
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		x.IncomingGroupId = value.Uint()
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		x.IncomingGroupPubKey = value.Bytes()
	case "band.bandtss.v1beta1.GroupTransition.status":
		x.Status = (TransitionStatus)(value.Enum())
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		x.ExecTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		x.IsForceTransition = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransition) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		if x.ExecTime == nil {
			x.ExecTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExecTime.ProtoReflect())
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		panic(fmt.Errorf("field signing_id of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		panic(fmt.Errorf("field current_group_id of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		panic(fmt.Errorf("field current_group_pub_key of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		panic(fmt.Errorf("field incoming_group_id of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		panic(fmt.Errorf("field incoming_group_pub_key of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.status":
		panic(fmt.Errorf("field status of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		panic(fmt.Errorf("field is_force_transition of message band.bandtss.v1beta1.GroupTransition is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GroupTransition) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransition.signing_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.GroupTransition.current_group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.GroupTransition.current_group_pub_key":
		return protoreflect.ValueOfBytes(nil)
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.bandtss.v1beta1.GroupTransition.incoming_group_pub_key":
		return protoreflect.ValueOfBytes(nil)
	case "band.bandtss.v1beta1.GroupTransition.status":
		return protoreflect.ValueOfEnum(0)
	case "band.bandtss.v1beta1.GroupTransition.exec_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "band.bandtss.v1beta1.GroupTransition.is_force_transition":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransition"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransition does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GroupTransition) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.bandtss.v1beta1.GroupTransition", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GroupTransition) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransition) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GroupTransition) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GroupTransition) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GroupTransition)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SigningId != 0 {
			n += 1 + runtime.Sov(uint64(x.SigningId))
		}
		if x.CurrentGroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentGroupId))
		}
		l = len(x.CurrentGroupPubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IncomingGroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.IncomingGroupId))
		}
		l = len(x.IncomingGroupPubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.ExecTime != nil {
			l = options.Size(x.ExecTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsForceTransition {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GroupTransition)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsForceTransition {
			i--
			if x.IsForceTransition {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.ExecTime != nil {
			encoded, err := options.Marshal(x.ExecTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if len(x.IncomingGroupPubKey) > 0 {
			i -= len(x.IncomingGroupPubKey)
			copy(dAtA[i:], x.IncomingGroupPubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IncomingGroupPubKey)))
			i--
			dAtA[i] = 0x2a
		}
		if x.IncomingGroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IncomingGroupId))
			i--
			dAtA[i] = 0x20
		}
		if len(x.CurrentGroupPubKey) > 0 {
			i -= len(x.CurrentGroupPubKey)
			copy(dAtA[i:], x.CurrentGroupPubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentGroupPubKey)))
			i--
			dAtA[i] = 0x1a
		}
		if x.CurrentGroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentGroupId))
			i--
			dAtA[i] = 0x10
		}
		if x.SigningId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SigningId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GroupTransition)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GroupTransition: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GroupTransition: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SigningId", wireType)
				}
				x.SigningId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SigningId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentGroupId", wireType)
				}
				x.CurrentGroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentGroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentGroupPubKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentGroupPubKey = append(x.CurrentGroupPubKey[:0], dAtA[iNdEx:postIndex]...)
				if x.CurrentGroupPubKey == nil {
					x.CurrentGroupPubKey = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IncomingGroupId", wireType)
				}
				x.IncomingGroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IncomingGroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IncomingGroupPubKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IncomingGroupPubKey = append(x.IncomingGroupPubKey[:0], dAtA[iNdEx:postIndex]...)
				if x.IncomingGroupPubKey == nil {
					x.IncomingGroupPubKey = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= TransitionStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExecTime == nil {
					x.ExecTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExecTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsForceTransition", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsForceTransition = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GroupTransitionSignatureOrder                 protoreflect.MessageDescriptor
	fd_GroupTransitionSignatureOrder_pub_key         protoreflect.FieldDescriptor
	fd_GroupTransitionSignatureOrder_transition_time protoreflect.FieldDescriptor
)

func init() {
	file_band_bandtss_v1beta1_bandtss_proto_init()
	md_GroupTransitionSignatureOrder = File_band_bandtss_v1beta1_bandtss_proto.Messages().ByName("GroupTransitionSignatureOrder")
	fd_GroupTransitionSignatureOrder_pub_key = md_GroupTransitionSignatureOrder.Fields().ByName("pub_key")
	fd_GroupTransitionSignatureOrder_transition_time = md_GroupTransitionSignatureOrder.Fields().ByName("transition_time")
}

var _ protoreflect.Message = (*fastReflection_GroupTransitionSignatureOrder)(nil)

type fastReflection_GroupTransitionSignatureOrder GroupTransitionSignatureOrder

func (x *GroupTransitionSignatureOrder) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GroupTransitionSignatureOrder)(x)
}

func (x *GroupTransitionSignatureOrder) slowProtoReflect() protoreflect.Message {
	mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GroupTransitionSignatureOrder_messageType fastReflection_GroupTransitionSignatureOrder_messageType
var _ protoreflect.MessageType = fastReflection_GroupTransitionSignatureOrder_messageType{}

type fastReflection_GroupTransitionSignatureOrder_messageType struct{}

func (x fastReflection_GroupTransitionSignatureOrder_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GroupTransitionSignatureOrder)(nil)
}
func (x fastReflection_GroupTransitionSignatureOrder_messageType) New() protoreflect.Message {
	return new(fastReflection_GroupTransitionSignatureOrder)
}
func (x fastReflection_GroupTransitionSignatureOrder_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GroupTransitionSignatureOrder
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GroupTransitionSignatureOrder) Descriptor() protoreflect.MessageDescriptor {
	return md_GroupTransitionSignatureOrder
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GroupTransitionSignatureOrder) Type() protoreflect.MessageType {
	return _fastReflection_GroupTransitionSignatureOrder_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GroupTransitionSignatureOrder) New() protoreflect.Message {
	return new(fastReflection_GroupTransitionSignatureOrder)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GroupTransitionSignatureOrder) Interface() protoreflect.ProtoMessage {
	return (*GroupTransitionSignatureOrder)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GroupTransitionSignatureOrder) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PubKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PubKey)
		if !f(fd_GroupTransitionSignatureOrder_pub_key, value) {
			return
		}
	}
	if x.TransitionTime != nil {
		value := protoreflect.ValueOfMessage(x.TransitionTime.ProtoReflect())
		if !f(fd_GroupTransitionSignatureOrder_transition_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GroupTransitionSignatureOrder) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		return len(x.PubKey) != 0
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		return x.TransitionTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransitionSignatureOrder) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		x.PubKey = nil
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		x.TransitionTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GroupTransitionSignatureOrder) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		value := x.PubKey
		return protoreflect.ValueOfBytes(value)
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		value := x.TransitionTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransitionSignatureOrder) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		x.PubKey = value.Bytes()
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		x.TransitionTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransitionSignatureOrder) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		if x.TransitionTime == nil {
			x.TransitionTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.TransitionTime.ProtoReflect())
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		panic(fmt.Errorf("field pub_key of message band.bandtss.v1beta1.GroupTransitionSignatureOrder is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GroupTransitionSignatureOrder) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.pub_key":
		return protoreflect.ValueOfBytes(nil)
	case "band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.bandtss.v1beta1.GroupTransitionSignatureOrder"))
		}
		panic(fmt.Errorf("message band.bandtss.v1beta1.GroupTransitionSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GroupTransitionSignatureOrder) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.bandtss.v1beta1.GroupTransitionSignatureOrder", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GroupTransitionSignatureOrder) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GroupTransitionSignatureOrder) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GroupTransitionSignatureOrder) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GroupTransitionSignatureOrder) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GroupTransitionSignatureOrder)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TransitionTime != nil {
			l = options.Size(x.TransitionTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GroupTransitionSignatureOrder)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TransitionTime != nil {
			encoded, err := options.Marshal(x.TransitionTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PubKey) > 0 {
			i -= len(x.PubKey)
			copy(dAtA[i:], x.PubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKey)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GroupTransitionSignatureOrder)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GroupTransitionSignatureOrder: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GroupTransitionSignatureOrder: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKey = append(x.PubKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PubKey == nil {
					x.PubKey = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransitionTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TransitionTime == nil {
					x.TransitionTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TransitionTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: band/bandtss/v1beta1/bandtss.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransitionStatus is an enumeration of the possible statuses of a group transition process.
type TransitionStatus int32

const (
	// TRANSITION_STATUS_UNSPECIFIED is the status of a group transition that has not been specified.
	TransitionStatus_TRANSITION_STATUS_UNSPECIFIED TransitionStatus = 0
	// TRANSITION_STATUS_CREATING_GROUP is the status of a group transition that a new group
	// is being created.
	TransitionStatus_TRANSITION_STATUS_CREATING_GROUP TransitionStatus = 1
	// TRANSITION_STATUS_WAITING_SIGN is the status of a group transition that waits members in
	// a current group to sign the transition message.
	TransitionStatus_TRANSITION_STATUS_WAITING_SIGN TransitionStatus = 2
	// TRANSITION_STATUS_WAITING_EXECUTION is the status of a group transition that
	// a transition process is completed, either from a forceTransition or having a current-group
	// signature on a transition message, but waits for the execution time.
	TransitionStatus_TRANSITION_STATUS_WAITING_EXECUTION TransitionStatus = 3
)

// Enum value maps for TransitionStatus.
var (
	TransitionStatus_name = map[int32]string{
		0: "TRANSITION_STATUS_UNSPECIFIED",
		1: "TRANSITION_STATUS_CREATING_GROUP",
		2: "TRANSITION_STATUS_WAITING_SIGN",
		3: "TRANSITION_STATUS_WAITING_EXECUTION",
	}
	TransitionStatus_value = map[string]int32{
		"TRANSITION_STATUS_UNSPECIFIED":       0,
		"TRANSITION_STATUS_CREATING_GROUP":    1,
		"TRANSITION_STATUS_WAITING_SIGN":      2,
		"TRANSITION_STATUS_WAITING_EXECUTION": 3,
	}
)

func (x TransitionStatus) Enum() *TransitionStatus {
	p := new(TransitionStatus)
	*p = x
	return p
}

func (x TransitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_band_bandtss_v1beta1_bandtss_proto_enumTypes[0].Descriptor()
}

func (TransitionStatus) Type() protoreflect.EnumType {
	return &file_band_bandtss_v1beta1_bandtss_proto_enumTypes[0]
}

func (x TransitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransitionStatus.Descriptor instead.
func (TransitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{0}
}

// Member maintains member information for monitoring their liveness activity.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the member.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// group_id is the group ID that the member belongs to.
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// is_active is a flag to indicate whether a member is active or not.
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// since is a block timestamp when a member status is changed (from active to inactive or vice versa).
	Since *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Member) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Member) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Member) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

// CuurentGroup is a bandtss current group information.
type CurrentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group_id is the ID of the current group.
	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// active_time is the timestamp at which the group becomes the current group of the module.
	ActiveTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *CurrentGroup) Reset() {
	*x = CurrentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentGroup) ProtoMessage() {}

// Deprecated: Use CurrentGroup.ProtoReflect.Descriptor instead.
func (*CurrentGroup) Descriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentGroup) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CurrentGroup) GetActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveTime
	}
	return nil
}

// Signing is a bandtss signing information.
type Signing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the bandtss signing.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// fee_per_signer is the tokens that will be paid per signer for this bandtss signing.
	FeePerSigner []*v1beta1.Coin `protobuf:"bytes,2,rep,name=fee_per_signer,json=feePerSigner,proto3" json:"fee_per_signer,omitempty"`
	// requester is the address who pays the bandtss signing.
	Requester string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	// current_group_signing_id is a tss signing ID of a current group.
	CurrentGroupSigningId uint64 `protobuf:"varint,4,opt,name=current_group_signing_id,json=currentGroupSigningId,proto3" json:"current_group_signing_id,omitempty"`
	// incoming_group_signing_id is a tss signing ID of an incoming group, if any.
	IncomingGroupSigningId uint64 `protobuf:"varint,5,opt,name=incoming_group_signing_id,json=incomingGroupSigningId,proto3" json:"incoming_group_signing_id,omitempty"`
}

func (x *Signing) Reset() {
	*x = Signing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signing) ProtoMessage() {}

// Deprecated: Use Signing.ProtoReflect.Descriptor instead.
func (*Signing) Descriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{2}
}

func (x *Signing) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Signing) GetFeePerSigner() []*v1beta1.Coin {
	if x != nil {
		return x.FeePerSigner
	}
	return nil
}

func (x *Signing) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *Signing) GetCurrentGroupSigningId() uint64 {
	if x != nil {
		return x.CurrentGroupSigningId
	}
	return 0
}

func (x *Signing) GetIncomingGroupSigningId() uint64 {
	if x != nil {
		return x.IncomingGroupSigningId
	}
	return 0
}

// GroupTransition defines the group transition information of the current group and incoming group.
type GroupTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signing_id is a tss signing ID of group transition signing request.
	SigningId uint64 `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3" json:"signing_id,omitempty"`
	// current_group_id is the ID of the group that will be replaced.
	CurrentGroupId uint64 `protobuf:"varint,2,opt,name=current_group_id,json=currentGroupId,proto3" json:"current_group_id,omitempty"`
	// current_group_pub_key is the public key pair that used for sign & verify transition group msg.
	CurrentGroupPubKey []byte `protobuf:"bytes,3,opt,name=current_group_pub_key,json=currentGroupPubKey,proto3" json:"current_group_pub_key,omitempty"`
	// new_group_id is the ID of the new group that be a new key candidate.
	IncomingGroupId uint64 `protobuf:"varint,4,opt,name=incoming_group_id,json=incomingGroupId,proto3" json:"incoming_group_id,omitempty"`
	// incoming_group_pub_key is the public key of the group that will be the next key of this group
	IncomingGroupPubKey []byte `protobuf:"bytes,5,opt,name=incoming_group_pub_key,json=incomingGroupPubKey,proto3" json:"incoming_group_pub_key,omitempty"`
	// status is an enumeration of the possible statuses of a group transition process.
	Status TransitionStatus `protobuf:"varint,6,opt,name=status,proto3,enum=band.bandtss.v1beta1.TransitionStatus" json:"status,omitempty"`
	// exec_time is the time when the transition will be executed.
	ExecTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=exec_time,json=execTime,proto3" json:"exec_time,omitempty"`
	// is_force_transition is a flag to indicate whether the current group signs the transition message
	// before the transition is executed or not.
	IsForceTransition bool `protobuf:"varint,8,opt,name=is_force_transition,json=isForceTransition,proto3" json:"is_force_transition,omitempty"`
}

func (x *GroupTransition) Reset() {
	*x = GroupTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTransition) ProtoMessage() {}

// Deprecated: Use GroupTransition.ProtoReflect.Descriptor instead.
func (*GroupTransition) Descriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{3}
}

func (x *GroupTransition) GetSigningId() uint64 {
	if x != nil {
		return x.SigningId
	}
	return 0
}

func (x *GroupTransition) GetCurrentGroupId() uint64 {
	if x != nil {
		return x.CurrentGroupId
	}
	return 0
}

func (x *GroupTransition) GetCurrentGroupPubKey() []byte {
	if x != nil {
		return x.CurrentGroupPubKey
	}
	return nil
}

func (x *GroupTransition) GetIncomingGroupId() uint64 {
	if x != nil {
		return x.IncomingGroupId
	}
	return 0
}

func (x *GroupTransition) GetIncomingGroupPubKey() []byte {
	if x != nil {
		return x.IncomingGroupPubKey
	}
	return nil
}

func (x *GroupTransition) GetStatus() TransitionStatus {
	if x != nil {
		return x.Status
	}
	return TransitionStatus_TRANSITION_STATUS_UNSPECIFIED
}

func (x *GroupTransition) GetExecTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecTime
	}
	return nil
}

func (x *GroupTransition) GetIsForceTransition() bool {
	if x != nil {
		return x.IsForceTransition
	}
	return false
}

// GroupTransitionSignatureOrder defines a general signature order for group transition.
type GroupTransitionSignatureOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pub_key is the public key of new group that the current group needs to be signed.
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// transition_time is the timestamp at which the transition is executed and the public key is active.
	TransitionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
}

func (x *GroupTransitionSignatureOrder) Reset() {
	*x = GroupTransitionSignatureOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_bandtss_v1beta1_bandtss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTransitionSignatureOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTransitionSignatureOrder) ProtoMessage() {}

// Deprecated: Use GroupTransitionSignatureOrder.ProtoReflect.Descriptor instead.
func (*GroupTransitionSignatureOrder) Descriptor() ([]byte, []int) {
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP(), []int{4}
}

func (x *GroupTransitionSignatureOrder) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *GroupTransitionSignatureOrder) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

var File_band_bandtss_v1beta1_bandtss_proto protoreflect.FileDescriptor

var file_band_bandtss_v1beta1_bandtss_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x74,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x5a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x3f, 0xe2, 0xde, 0x1f, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xb1, 0x01, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5a, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x3f, 0xe2, 0xde, 0x1f, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0xde, 0x1f, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xde, 0x03, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44,
	0xfa, 0xde, 0x1f, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x71, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4f, 0xe2, 0xde, 0x1f, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0xfa, 0xde, 0x1f, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x8b, 0x01,
	0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x50, 0xe2, 0xde, 0x1f, 0x16, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0xfa, 0xde, 0x1f,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x3a, 0x04, 0xe8, 0xa0, 0x1f,
	0x01, 0x22, 0xdf, 0x05, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x43, 0xe2, 0xde, 0x1f, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0xfa, 0xde, 0x1f, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x73, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x46, 0xe2, 0xde, 0x1f, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x32, 0xfa, 0xde, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x73, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x47, 0xe2,
	0xde, 0x1f, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x32, 0xfa, 0xde, 0x1f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x0b, 0xca, 0xb4, 0x2d, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2a, 0xae, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x04, 0x88, 0xa3, 0x1e,
	0x00, 0x42, 0xe8, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x62,
	0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0c,
	0x42, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x74, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x62, 0x61, 0x6e, 0x64, 0x74, 0x73,
	0x73, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x42, 0x58, 0xaa, 0x02,
	0x14, 0x42, 0x61, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x14, 0x42, 0x61, 0x6e, 0x64, 0x5c, 0x42, 0x61, 0x6e,
	0x64, 0x74, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x20, 0x42,
	0x61, 0x6e, 0x64, 0x5c, 0x42, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x16, 0x42, 0x61, 0x6e, 0x64, 0x3a, 0x3a, 0x42, 0x61, 0x6e, 0x64, 0x74, 0x73, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa8, 0xe2, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_band_bandtss_v1beta1_bandtss_proto_rawDescOnce sync.Once
	file_band_bandtss_v1beta1_bandtss_proto_rawDescData = file_band_bandtss_v1beta1_bandtss_proto_rawDesc
)

func file_band_bandtss_v1beta1_bandtss_proto_rawDescGZIP() []byte {
	file_band_bandtss_v1beta1_bandtss_proto_rawDescOnce.Do(func() {
		file_band_bandtss_v1beta1_bandtss_proto_rawDescData = protoimpl.X.CompressGZIP(file_band_bandtss_v1beta1_bandtss_proto_rawDescData)
	})
	return file_band_bandtss_v1beta1_bandtss_proto_rawDescData
}

var file_band_bandtss_v1beta1_bandtss_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_band_bandtss_v1beta1_bandtss_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_band_bandtss_v1beta1_bandtss_proto_goTypes = []interface{}{
	(TransitionStatus)(0),                 // 0: band.bandtss.v1beta1.TransitionStatus
	(*Member)(nil),                        // 1: band.bandtss.v1beta1.Member
	(*CurrentGroup)(nil),                  // 2: band.bandtss.v1beta1.CurrentGroup
	(*Signing)(nil),                       // 3: band.bandtss.v1beta1.Signing
	(*GroupTransition)(nil),               // 4: band.bandtss.v1beta1.GroupTransition
	(*GroupTransitionSignatureOrder)(nil), // 5: band.bandtss.v1beta1.GroupTransitionSignatureOrder
	(*timestamppb.Timestamp)(nil),         // 6: google.protobuf.Timestamp
	(*v1beta1.Coin)(nil),                  // 7: cosmos.base.v1beta1.Coin
}
var file_band_bandtss_v1beta1_bandtss_proto_depIdxs = []int32{
	6, // 0: band.bandtss.v1beta1.Member.since:type_name -> google.protobuf.Timestamp
	6, // 1: band.bandtss.v1beta1.CurrentGroup.active_time:type_name -> google.protobuf.Timestamp
	7, // 2: band.bandtss.v1beta1.Signing.fee_per_signer:type_name -> cosmos.base.v1beta1.Coin
	0, // 3: band.bandtss.v1beta1.GroupTransition.status:type_name -> band.bandtss.v1beta1.TransitionStatus
	6, // 4: band.bandtss.v1beta1.GroupTransition.exec_time:type_name -> google.protobuf.Timestamp
	6, // 5: band.bandtss.v1beta1.GroupTransitionSignatureOrder.transition_time:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_band_bandtss_v1beta1_bandtss_proto_init() }
func file_band_bandtss_v1beta1_bandtss_proto_init() {
	if File_band_bandtss_v1beta1_bandtss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_band_bandtss_v1beta1_bandtss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_bandtss_v1beta1_bandtss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_bandtss_v1beta1_bandtss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_bandtss_v1beta1_bandtss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_bandtss_v1beta1_bandtss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTransitionSignatureOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_band_bandtss_v1beta1_bandtss_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_band_bandtss_v1beta1_bandtss_proto_goTypes,
		DependencyIndexes: file_band_bandtss_v1beta1_bandtss_proto_depIdxs,
		EnumInfos:         file_band_bandtss_v1beta1_bandtss_proto_enumTypes,
		MessageInfos:      file_band_bandtss_v1beta1_bandtss_proto_msgTypes,
	}.Build()
	File_band_bandtss_v1beta1_bandtss_proto = out.File
	file_band_bandtss_v1beta1_bandtss_proto_rawDesc = nil
	file_band_bandtss_v1beta1_bandtss_proto_goTypes = nil
	file_band_bandtss_v1beta1_bandtss_proto_depIdxs = nil
}
