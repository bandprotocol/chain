// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tunnelv1beta1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_1_list)(nil)

type _Params_1_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_7_list)(nil)

type _Params_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                             protoreflect.MessageDescriptor
	fd_Params_min_deposit                 protoreflect.FieldDescriptor
	fd_Params_min_interval                protoreflect.FieldDescriptor
	fd_Params_max_interval                protoreflect.FieldDescriptor
	fd_Params_min_deviation_bps           protoreflect.FieldDescriptor
	fd_Params_max_deviation_bps           protoreflect.FieldDescriptor
	fd_Params_max_signals                 protoreflect.FieldDescriptor
	fd_Params_base_packet_fee             protoreflect.FieldDescriptor
	fd_Params_router_ibc_channel          protoreflect.FieldDescriptor
	fd_Params_router_integration_contract protoreflect.FieldDescriptor
	fd_Params_axelar_ibc_channel          protoreflect.FieldDescriptor
	fd_Params_axelar_gmp_account          protoreflect.FieldDescriptor
	fd_Params_axelar_fee_recipient        protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_params_proto_init()
	md_Params = File_band_tunnel_v1beta1_params_proto.Messages().ByName("Params")
	fd_Params_min_deposit = md_Params.Fields().ByName("min_deposit")
	fd_Params_min_interval = md_Params.Fields().ByName("min_interval")
	fd_Params_max_interval = md_Params.Fields().ByName("max_interval")
	fd_Params_min_deviation_bps = md_Params.Fields().ByName("min_deviation_bps")
	fd_Params_max_deviation_bps = md_Params.Fields().ByName("max_deviation_bps")
	fd_Params_max_signals = md_Params.Fields().ByName("max_signals")
	fd_Params_base_packet_fee = md_Params.Fields().ByName("base_packet_fee")
	fd_Params_router_ibc_channel = md_Params.Fields().ByName("router_ibc_channel")
	fd_Params_router_integration_contract = md_Params.Fields().ByName("router_integration_contract")
	fd_Params_axelar_ibc_channel = md_Params.Fields().ByName("axelar_ibc_channel")
	fd_Params_axelar_gmp_account = md_Params.Fields().ByName("axelar_gmp_account")
	fd_Params_axelar_fee_recipient = md_Params.Fields().ByName("axelar_fee_recipient")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.MinDeposit) != 0 {
		value := protoreflect.ValueOfList(&_Params_1_list{list: &x.MinDeposit})
		if !f(fd_Params_min_deposit, value) {
			return
		}
	}
	if x.MinInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinInterval)
		if !f(fd_Params_min_interval, value) {
			return
		}
	}
	if x.MaxInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxInterval)
		if !f(fd_Params_max_interval, value) {
			return
		}
	}
	if x.MinDeviationBps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinDeviationBps)
		if !f(fd_Params_min_deviation_bps, value) {
			return
		}
	}
	if x.MaxDeviationBps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxDeviationBps)
		if !f(fd_Params_max_deviation_bps, value) {
			return
		}
	}
	if x.MaxSignals != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxSignals)
		if !f(fd_Params_max_signals, value) {
			return
		}
	}
	if len(x.BasePacketFee) != 0 {
		value := protoreflect.ValueOfList(&_Params_7_list{list: &x.BasePacketFee})
		if !f(fd_Params_base_packet_fee, value) {
			return
		}
	}
	if x.RouterIbcChannel != "" {
		value := protoreflect.ValueOfString(x.RouterIbcChannel)
		if !f(fd_Params_router_ibc_channel, value) {
			return
		}
	}
	if x.RouterIntegrationContract != "" {
		value := protoreflect.ValueOfString(x.RouterIntegrationContract)
		if !f(fd_Params_router_integration_contract, value) {
			return
		}
	}
	if x.AxelarIbcChannel != "" {
		value := protoreflect.ValueOfString(x.AxelarIbcChannel)
		if !f(fd_Params_axelar_ibc_channel, value) {
			return
		}
	}
	if x.AxelarGmpAccount != "" {
		value := protoreflect.ValueOfString(x.AxelarGmpAccount)
		if !f(fd_Params_axelar_gmp_account, value) {
			return
		}
	}
	if x.AxelarFeeRecipient != "" {
		value := protoreflect.ValueOfString(x.AxelarFeeRecipient)
		if !f(fd_Params_axelar_fee_recipient, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		return len(x.MinDeposit) != 0
	case "band.tunnel.v1beta1.Params.min_interval":
		return x.MinInterval != uint64(0)
	case "band.tunnel.v1beta1.Params.max_interval":
		return x.MaxInterval != uint64(0)
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		return x.MinDeviationBps != uint64(0)
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		return x.MaxDeviationBps != uint64(0)
	case "band.tunnel.v1beta1.Params.max_signals":
		return x.MaxSignals != uint64(0)
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		return len(x.BasePacketFee) != 0
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		return x.RouterIbcChannel != ""
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		return x.RouterIntegrationContract != ""
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		return x.AxelarIbcChannel != ""
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		return x.AxelarGmpAccount != ""
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		return x.AxelarFeeRecipient != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		x.MinDeposit = nil
	case "band.tunnel.v1beta1.Params.min_interval":
		x.MinInterval = uint64(0)
	case "band.tunnel.v1beta1.Params.max_interval":
		x.MaxInterval = uint64(0)
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		x.MinDeviationBps = uint64(0)
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		x.MaxDeviationBps = uint64(0)
	case "band.tunnel.v1beta1.Params.max_signals":
		x.MaxSignals = uint64(0)
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		x.BasePacketFee = nil
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		x.RouterIbcChannel = ""
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		x.RouterIntegrationContract = ""
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		x.AxelarIbcChannel = ""
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		x.AxelarGmpAccount = ""
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		x.AxelarFeeRecipient = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		if len(x.MinDeposit) == 0 {
			return protoreflect.ValueOfList(&_Params_1_list{})
		}
		listValue := &_Params_1_list{list: &x.MinDeposit}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.Params.min_interval":
		value := x.MinInterval
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Params.max_interval":
		value := x.MaxInterval
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		value := x.MinDeviationBps
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		value := x.MaxDeviationBps
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Params.max_signals":
		value := x.MaxSignals
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		if len(x.BasePacketFee) == 0 {
			return protoreflect.ValueOfList(&_Params_7_list{})
		}
		listValue := &_Params_7_list{list: &x.BasePacketFee}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		value := x.RouterIbcChannel
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		value := x.RouterIntegrationContract
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		value := x.AxelarIbcChannel
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		value := x.AxelarGmpAccount
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		value := x.AxelarFeeRecipient
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		lv := value.List()
		clv := lv.(*_Params_1_list)
		x.MinDeposit = *clv.list
	case "band.tunnel.v1beta1.Params.min_interval":
		x.MinInterval = value.Uint()
	case "band.tunnel.v1beta1.Params.max_interval":
		x.MaxInterval = value.Uint()
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		x.MinDeviationBps = value.Uint()
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		x.MaxDeviationBps = value.Uint()
	case "band.tunnel.v1beta1.Params.max_signals":
		x.MaxSignals = value.Uint()
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		lv := value.List()
		clv := lv.(*_Params_7_list)
		x.BasePacketFee = *clv.list
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		x.RouterIbcChannel = value.Interface().(string)
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		x.RouterIntegrationContract = value.Interface().(string)
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		x.AxelarIbcChannel = value.Interface().(string)
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		x.AxelarGmpAccount = value.Interface().(string)
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		x.AxelarFeeRecipient = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		if x.MinDeposit == nil {
			x.MinDeposit = []*v1beta1.Coin{}
		}
		value := &_Params_1_list{list: &x.MinDeposit}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		if x.BasePacketFee == nil {
			x.BasePacketFee = []*v1beta1.Coin{}
		}
		value := &_Params_7_list{list: &x.BasePacketFee}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Params.min_interval":
		panic(fmt.Errorf("field min_interval of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.max_interval":
		panic(fmt.Errorf("field max_interval of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		panic(fmt.Errorf("field min_deviation_bps of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		panic(fmt.Errorf("field max_deviation_bps of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.max_signals":
		panic(fmt.Errorf("field max_signals of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		panic(fmt.Errorf("field router_ibc_channel of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		panic(fmt.Errorf("field router_integration_contract of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		panic(fmt.Errorf("field axelar_ibc_channel of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		panic(fmt.Errorf("field axelar_gmp_account of message band.tunnel.v1beta1.Params is not mutable"))
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		panic(fmt.Errorf("field axelar_fee_recipient of message band.tunnel.v1beta1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Params.min_deposit":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_1_list{list: &list})
	case "band.tunnel.v1beta1.Params.min_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Params.max_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Params.min_deviation_bps":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Params.max_deviation_bps":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Params.max_signals":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Params.base_packet_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_7_list{list: &list})
	case "band.tunnel.v1beta1.Params.router_ibc_channel":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Params.router_integration_contract":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Params.axelar_ibc_channel":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Params.axelar_gmp_account":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Params.axelar_fee_recipient":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Params"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.MinDeposit) > 0 {
			for _, e := range x.MinDeposit {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.MinInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.MinInterval))
		}
		if x.MaxInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxInterval))
		}
		if x.MinDeviationBps != 0 {
			n += 1 + runtime.Sov(uint64(x.MinDeviationBps))
		}
		if x.MaxDeviationBps != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxDeviationBps))
		}
		if x.MaxSignals != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxSignals))
		}
		if len(x.BasePacketFee) > 0 {
			for _, e := range x.BasePacketFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RouterIbcChannel)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RouterIntegrationContract)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AxelarIbcChannel)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AxelarGmpAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AxelarFeeRecipient)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AxelarFeeRecipient) > 0 {
			i -= len(x.AxelarFeeRecipient)
			copy(dAtA[i:], x.AxelarFeeRecipient)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AxelarFeeRecipient)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.AxelarGmpAccount) > 0 {
			i -= len(x.AxelarGmpAccount)
			copy(dAtA[i:], x.AxelarGmpAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AxelarGmpAccount)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.AxelarIbcChannel) > 0 {
			i -= len(x.AxelarIbcChannel)
			copy(dAtA[i:], x.AxelarIbcChannel)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AxelarIbcChannel)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.RouterIntegrationContract) > 0 {
			i -= len(x.RouterIntegrationContract)
			copy(dAtA[i:], x.RouterIntegrationContract)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouterIntegrationContract)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.RouterIbcChannel) > 0 {
			i -= len(x.RouterIbcChannel)
			copy(dAtA[i:], x.RouterIbcChannel)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouterIbcChannel)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.BasePacketFee) > 0 {
			for iNdEx := len(x.BasePacketFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BasePacketFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.MaxSignals != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSignals))
			i--
			dAtA[i] = 0x30
		}
		if x.MaxDeviationBps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxDeviationBps))
			i--
			dAtA[i] = 0x28
		}
		if x.MinDeviationBps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinDeviationBps))
			i--
			dAtA[i] = 0x20
		}
		if x.MaxInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxInterval))
			i--
			dAtA[i] = 0x18
		}
		if x.MinInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinInterval))
			i--
			dAtA[i] = 0x10
		}
		if len(x.MinDeposit) > 0 {
			for iNdEx := len(x.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MinDeposit[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinDeposit = append(x.MinDeposit, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinDeposit[len(x.MinDeposit)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinInterval", wireType)
				}
				x.MinInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxInterval", wireType)
				}
				x.MaxInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinDeviationBps", wireType)
				}
				x.MinDeviationBps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinDeviationBps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDeviationBps", wireType)
				}
				x.MaxDeviationBps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxDeviationBps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSignals", wireType)
				}
				x.MaxSignals = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSignals |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BasePacketFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BasePacketFee = append(x.BasePacketFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BasePacketFee[len(x.BasePacketFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouterIbcChannel", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouterIbcChannel = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouterIntegrationContract", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouterIntegrationContract = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AxelarIbcChannel", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AxelarIbcChannel = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AxelarGmpAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AxelarGmpAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AxelarFeeRecipient", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AxelarFeeRecipient = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: band/tunnel/v1beta1/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params is the data structure that keeps the parameters of the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min_deposit is the minimum deposit required to create a tunnel.
	MinDeposit []*v1beta1.Coin `protobuf:"bytes,1,rep,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	// min_interval is the minimum interval in seconds.
	MinInterval uint64 `protobuf:"varint,2,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"`
	// max_interval is the maximum interval in seconds.
	MaxInterval uint64 `protobuf:"varint,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// min_deviation_bps is the minimum deviation in basis points.
	MinDeviationBps uint64 `protobuf:"varint,4,opt,name=min_deviation_bps,json=minDeviationBps,proto3" json:"min_deviation_bps,omitempty"`
	// max_deviation_bps is the maximum deviation in basis points.
	MaxDeviationBps uint64 `protobuf:"varint,5,opt,name=max_deviation_bps,json=maxDeviationBps,proto3" json:"max_deviation_bps,omitempty"`
	// max_signals defines the maximum number of signals allowed per tunnel.
	MaxSignals uint64 `protobuf:"varint,6,opt,name=max_signals,json=maxSignals,proto3" json:"max_signals,omitempty"`
	// base_packet_fee is the base fee for each packet.
	BasePacketFee []*v1beta1.Coin `protobuf:"bytes,7,rep,name=base_packet_fee,json=basePacketFee,proto3" json:"base_packet_fee,omitempty"`
	// router_ibc_channel specifies the IBC channel used by the tunnel to communicate with the Router chain.
	RouterIbcChannel string `protobuf:"bytes,8,opt,name=router_ibc_channel,json=routerIbcChannel,proto3" json:"router_ibc_channel,omitempty"`
	// router_integration_contract specifies the address of the Router integration contract on the Router chain
	// that the tunnel module will interact with.
	RouterIntegrationContract string `protobuf:"bytes,9,opt,name=router_integration_contract,json=routerIntegrationContract,proto3" json:"router_integration_contract,omitempty"`
	// axelar_ibc_channel specifies the IBC channel used by the tunnel to communicate with the axelar chain.
	AxelarIbcChannel string `protobuf:"bytes,10,opt,name=axelar_ibc_channel,json=axelarIbcChannel,proto3" json:"axelar_ibc_channel,omitempty"`
	// axelar_gmp_account is the account address on axelar chain that processes and verifies Axelar GMP transactions.
	AxelarGmpAccount string `protobuf:"bytes,11,opt,name=axelar_gmp_account,json=axelarGmpAccount,proto3" json:"axelar_gmp_account,omitempty"`
	// axelar_fee_recipient is the account address on axelar chain that receive fee from tunnel.
	AxelarFeeRecipient string `protobuf:"bytes,12,opt,name=axelar_fee_recipient,json=axelarFeeRecipient,proto3" json:"axelar_fee_recipient,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetMinDeposit() []*v1beta1.Coin {
	if x != nil {
		return x.MinDeposit
	}
	return nil
}

func (x *Params) GetMinInterval() uint64 {
	if x != nil {
		return x.MinInterval
	}
	return 0
}

func (x *Params) GetMaxInterval() uint64 {
	if x != nil {
		return x.MaxInterval
	}
	return 0
}

func (x *Params) GetMinDeviationBps() uint64 {
	if x != nil {
		return x.MinDeviationBps
	}
	return 0
}

func (x *Params) GetMaxDeviationBps() uint64 {
	if x != nil {
		return x.MaxDeviationBps
	}
	return 0
}

func (x *Params) GetMaxSignals() uint64 {
	if x != nil {
		return x.MaxSignals
	}
	return 0
}

func (x *Params) GetBasePacketFee() []*v1beta1.Coin {
	if x != nil {
		return x.BasePacketFee
	}
	return nil
}

func (x *Params) GetRouterIbcChannel() string {
	if x != nil {
		return x.RouterIbcChannel
	}
	return ""
}

func (x *Params) GetRouterIntegrationContract() string {
	if x != nil {
		return x.RouterIntegrationContract
	}
	return ""
}

func (x *Params) GetAxelarIbcChannel() string {
	if x != nil {
		return x.AxelarIbcChannel
	}
	return ""
}

func (x *Params) GetAxelarGmpAccount() string {
	if x != nil {
		return x.AxelarGmpAccount
	}
	return ""
}

func (x *Params) GetAxelarFeeRecipient() string {
	if x != nil {
		return x.AxelarFeeRecipient
	}
	return ""
}

var File_band_tunnel_v1beta1_params_proto protoreflect.FileDescriptor

var file_band_tunnel_v1beta1_params_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x06,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6c, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x11,
	0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x0f, 0x4d, 0x69, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x50, 0x53, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x70, 0x73, 0x12, 0x3f, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x0f, 0x4d, 0x61,
	0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x50, 0x53, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x70, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12,
	0x73, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x62, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x42, 0x43, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x62,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x12, 0x61, 0x78, 0x65, 0x6c,
	0x61, 0x72, 0x5f, 0x69, 0x62, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x41, 0x78, 0x65, 0x6c, 0x61, 0x72,
	0x49, 0x42, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x10, 0x61, 0x78, 0x65, 0x6c,
	0x61, 0x72, 0x49, 0x62, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x12,
	0x61, 0x78, 0x65, 0x6c, 0x61, 0x72, 0x5f, 0x67, 0x6d, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x41, 0x78,
	0x65, 0x6c, 0x61, 0x72, 0x47, 0x4d, 0x50, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10,
	0x61, 0x78, 0x65, 0x6c, 0x61, 0x72, 0x47, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x78, 0x65, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x78, 0x65, 0x6c, 0x61, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xdc, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x54,
	0x58, 0xaa, 0x02, 0x13, 0x42, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x13, 0x42, 0x61, 0x6e, 0x64, 0x5c, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1f,
	0x42, 0x61, 0x6e, 0x64, 0x5c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x15, 0x42, 0x61, 0x6e, 0x64, 0x3a, 0x3a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_band_tunnel_v1beta1_params_proto_rawDescOnce sync.Once
	file_band_tunnel_v1beta1_params_proto_rawDescData = file_band_tunnel_v1beta1_params_proto_rawDesc
)

func file_band_tunnel_v1beta1_params_proto_rawDescGZIP() []byte {
	file_band_tunnel_v1beta1_params_proto_rawDescOnce.Do(func() {
		file_band_tunnel_v1beta1_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_band_tunnel_v1beta1_params_proto_rawDescData)
	})
	return file_band_tunnel_v1beta1_params_proto_rawDescData
}

var file_band_tunnel_v1beta1_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_band_tunnel_v1beta1_params_proto_goTypes = []interface{}{
	(*Params)(nil),       // 0: band.tunnel.v1beta1.Params
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
}
var file_band_tunnel_v1beta1_params_proto_depIdxs = []int32{
	1, // 0: band.tunnel.v1beta1.Params.min_deposit:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: band.tunnel.v1beta1.Params.base_packet_fee:type_name -> cosmos.base.v1beta1.Coin
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_band_tunnel_v1beta1_params_proto_init() }
func file_band_tunnel_v1beta1_params_proto_init() {
	if File_band_tunnel_v1beta1_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_band_tunnel_v1beta1_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_band_tunnel_v1beta1_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_band_tunnel_v1beta1_params_proto_goTypes,
		DependencyIndexes: file_band_tunnel_v1beta1_params_proto_depIdxs,
		MessageInfos:      file_band_tunnel_v1beta1_params_proto_msgTypes,
	}.Build()
	File_band_tunnel_v1beta1_params_proto = out.File
	file_band_tunnel_v1beta1_params_proto_rawDesc = nil
	file_band_tunnel_v1beta1_params_proto_goTypes = nil
	file_band_tunnel_v1beta1_params_proto_depIdxs = nil
}
