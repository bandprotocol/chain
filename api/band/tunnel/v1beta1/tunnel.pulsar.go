// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tunnelv1beta1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	v1beta11 "github.com/bandprotocol/chain/v3/api/band/feeds/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Tunnel_5_list)(nil)

type _Tunnel_5_list struct {
	list *[]*SignalDeviation
}

func (x *_Tunnel_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Tunnel_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Tunnel_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignalDeviation)
	(*x.list)[i] = concreteValue
}

func (x *_Tunnel_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignalDeviation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Tunnel_5_list) AppendMutable() protoreflect.Value {
	v := new(SignalDeviation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Tunnel_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Tunnel_5_list) NewElement() protoreflect.Value {
	v := new(SignalDeviation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Tunnel_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Tunnel_7_list)(nil)

type _Tunnel_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Tunnel_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Tunnel_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Tunnel_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Tunnel_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Tunnel_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Tunnel_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Tunnel_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Tunnel_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Tunnel                   protoreflect.MessageDescriptor
	fd_Tunnel_id                protoreflect.FieldDescriptor
	fd_Tunnel_sequence          protoreflect.FieldDescriptor
	fd_Tunnel_route             protoreflect.FieldDescriptor
	fd_Tunnel_fee_payer         protoreflect.FieldDescriptor
	fd_Tunnel_signal_deviations protoreflect.FieldDescriptor
	fd_Tunnel_interval          protoreflect.FieldDescriptor
	fd_Tunnel_total_deposit     protoreflect.FieldDescriptor
	fd_Tunnel_is_active         protoreflect.FieldDescriptor
	fd_Tunnel_created_at        protoreflect.FieldDescriptor
	fd_Tunnel_creator           protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_Tunnel = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("Tunnel")
	fd_Tunnel_id = md_Tunnel.Fields().ByName("id")
	fd_Tunnel_sequence = md_Tunnel.Fields().ByName("sequence")
	fd_Tunnel_route = md_Tunnel.Fields().ByName("route")
	fd_Tunnel_fee_payer = md_Tunnel.Fields().ByName("fee_payer")
	fd_Tunnel_signal_deviations = md_Tunnel.Fields().ByName("signal_deviations")
	fd_Tunnel_interval = md_Tunnel.Fields().ByName("interval")
	fd_Tunnel_total_deposit = md_Tunnel.Fields().ByName("total_deposit")
	fd_Tunnel_is_active = md_Tunnel.Fields().ByName("is_active")
	fd_Tunnel_created_at = md_Tunnel.Fields().ByName("created_at")
	fd_Tunnel_creator = md_Tunnel.Fields().ByName("creator")
}

var _ protoreflect.Message = (*fastReflection_Tunnel)(nil)

type fastReflection_Tunnel Tunnel

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Tunnel)(x)
}

func (x *Tunnel) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Tunnel_messageType fastReflection_Tunnel_messageType
var _ protoreflect.MessageType = fastReflection_Tunnel_messageType{}

type fastReflection_Tunnel_messageType struct{}

func (x fastReflection_Tunnel_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Tunnel)(nil)
}
func (x fastReflection_Tunnel_messageType) New() protoreflect.Message {
	return new(fastReflection_Tunnel)
}
func (x fastReflection_Tunnel_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Tunnel
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Tunnel) Descriptor() protoreflect.MessageDescriptor {
	return md_Tunnel
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Tunnel) Type() protoreflect.MessageType {
	return _fastReflection_Tunnel_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Tunnel) New() protoreflect.Message {
	return new(fastReflection_Tunnel)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Tunnel) Interface() protoreflect.ProtoMessage {
	return (*Tunnel)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Tunnel) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Tunnel_id, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_Tunnel_sequence, value) {
			return
		}
	}
	if x.Route != nil {
		value := protoreflect.ValueOfMessage(x.Route.ProtoReflect())
		if !f(fd_Tunnel_route, value) {
			return
		}
	}
	if x.FeePayer != "" {
		value := protoreflect.ValueOfString(x.FeePayer)
		if !f(fd_Tunnel_fee_payer, value) {
			return
		}
	}
	if len(x.SignalDeviations) != 0 {
		value := protoreflect.ValueOfList(&_Tunnel_5_list{list: &x.SignalDeviations})
		if !f(fd_Tunnel_signal_deviations, value) {
			return
		}
	}
	if x.Interval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Interval)
		if !f(fd_Tunnel_interval, value) {
			return
		}
	}
	if len(x.TotalDeposit) != 0 {
		value := protoreflect.ValueOfList(&_Tunnel_7_list{list: &x.TotalDeposit})
		if !f(fd_Tunnel_total_deposit, value) {
			return
		}
	}
	if x.IsActive != false {
		value := protoreflect.ValueOfBool(x.IsActive)
		if !f(fd_Tunnel_is_active, value) {
			return
		}
	}
	if x.CreatedAt != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreatedAt)
		if !f(fd_Tunnel_created_at, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Tunnel_creator, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Tunnel) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Tunnel.id":
		return x.Id != uint64(0)
	case "band.tunnel.v1beta1.Tunnel.sequence":
		return x.Sequence != uint64(0)
	case "band.tunnel.v1beta1.Tunnel.route":
		return x.Route != nil
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		return x.FeePayer != ""
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		return len(x.SignalDeviations) != 0
	case "band.tunnel.v1beta1.Tunnel.interval":
		return x.Interval != uint64(0)
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		return len(x.TotalDeposit) != 0
	case "band.tunnel.v1beta1.Tunnel.is_active":
		return x.IsActive != false
	case "band.tunnel.v1beta1.Tunnel.created_at":
		return x.CreatedAt != int64(0)
	case "band.tunnel.v1beta1.Tunnel.creator":
		return x.Creator != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Tunnel) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Tunnel.id":
		x.Id = uint64(0)
	case "band.tunnel.v1beta1.Tunnel.sequence":
		x.Sequence = uint64(0)
	case "band.tunnel.v1beta1.Tunnel.route":
		x.Route = nil
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		x.FeePayer = ""
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		x.SignalDeviations = nil
	case "band.tunnel.v1beta1.Tunnel.interval":
		x.Interval = uint64(0)
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		x.TotalDeposit = nil
	case "band.tunnel.v1beta1.Tunnel.is_active":
		x.IsActive = false
	case "band.tunnel.v1beta1.Tunnel.created_at":
		x.CreatedAt = int64(0)
	case "band.tunnel.v1beta1.Tunnel.creator":
		x.Creator = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Tunnel) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.Tunnel.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Tunnel.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Tunnel.route":
		value := x.Route
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		value := x.FeePayer
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		if len(x.SignalDeviations) == 0 {
			return protoreflect.ValueOfList(&_Tunnel_5_list{})
		}
		listValue := &_Tunnel_5_list{list: &x.SignalDeviations}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.Tunnel.interval":
		value := x.Interval
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		if len(x.TotalDeposit) == 0 {
			return protoreflect.ValueOfList(&_Tunnel_7_list{})
		}
		listValue := &_Tunnel_7_list{list: &x.TotalDeposit}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.Tunnel.is_active":
		value := x.IsActive
		return protoreflect.ValueOfBool(value)
	case "band.tunnel.v1beta1.Tunnel.created_at":
		value := x.CreatedAt
		return protoreflect.ValueOfInt64(value)
	case "band.tunnel.v1beta1.Tunnel.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Tunnel) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Tunnel.id":
		x.Id = value.Uint()
	case "band.tunnel.v1beta1.Tunnel.sequence":
		x.Sequence = value.Uint()
	case "band.tunnel.v1beta1.Tunnel.route":
		x.Route = value.Message().Interface().(*anypb.Any)
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		x.FeePayer = value.Interface().(string)
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		lv := value.List()
		clv := lv.(*_Tunnel_5_list)
		x.SignalDeviations = *clv.list
	case "band.tunnel.v1beta1.Tunnel.interval":
		x.Interval = value.Uint()
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		lv := value.List()
		clv := lv.(*_Tunnel_7_list)
		x.TotalDeposit = *clv.list
	case "band.tunnel.v1beta1.Tunnel.is_active":
		x.IsActive = value.Bool()
	case "band.tunnel.v1beta1.Tunnel.created_at":
		x.CreatedAt = value.Int()
	case "band.tunnel.v1beta1.Tunnel.creator":
		x.Creator = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Tunnel) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Tunnel.route":
		if x.Route == nil {
			x.Route = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Route.ProtoReflect())
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		if x.SignalDeviations == nil {
			x.SignalDeviations = []*SignalDeviation{}
		}
		value := &_Tunnel_5_list{list: &x.SignalDeviations}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		if x.TotalDeposit == nil {
			x.TotalDeposit = []*v1beta1.Coin{}
		}
		value := &_Tunnel_7_list{list: &x.TotalDeposit}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Tunnel.id":
		panic(fmt.Errorf("field id of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.sequence":
		panic(fmt.Errorf("field sequence of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		panic(fmt.Errorf("field fee_payer of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.interval":
		panic(fmt.Errorf("field interval of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.is_active":
		panic(fmt.Errorf("field is_active of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.created_at":
		panic(fmt.Errorf("field created_at of message band.tunnel.v1beta1.Tunnel is not mutable"))
	case "band.tunnel.v1beta1.Tunnel.creator":
		panic(fmt.Errorf("field creator of message band.tunnel.v1beta1.Tunnel is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Tunnel) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Tunnel.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Tunnel.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Tunnel.route":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "band.tunnel.v1beta1.Tunnel.fee_payer":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Tunnel.signal_deviations":
		list := []*SignalDeviation{}
		return protoreflect.ValueOfList(&_Tunnel_5_list{list: &list})
	case "band.tunnel.v1beta1.Tunnel.interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Tunnel.total_deposit":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Tunnel_7_list{list: &list})
	case "band.tunnel.v1beta1.Tunnel.is_active":
		return protoreflect.ValueOfBool(false)
	case "band.tunnel.v1beta1.Tunnel.created_at":
		return protoreflect.ValueOfInt64(int64(0))
	case "band.tunnel.v1beta1.Tunnel.creator":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Tunnel"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Tunnel does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Tunnel) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.Tunnel", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Tunnel) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Tunnel) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Tunnel) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Tunnel) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Tunnel)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if x.Route != nil {
			l = options.Size(x.Route)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeePayer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SignalDeviations) > 0 {
			for _, e := range x.SignalDeviations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Interval != 0 {
			n += 1 + runtime.Sov(uint64(x.Interval))
		}
		if len(x.TotalDeposit) > 0 {
			for _, e := range x.TotalDeposit {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.IsActive {
			n += 2
		}
		if x.CreatedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAt))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Tunnel)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x52
		}
		if x.CreatedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAt))
			i--
			dAtA[i] = 0x48
		}
		if x.IsActive {
			i--
			if x.IsActive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if len(x.TotalDeposit) > 0 {
			for iNdEx := len(x.TotalDeposit) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalDeposit[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.Interval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Interval))
			i--
			dAtA[i] = 0x30
		}
		if len(x.SignalDeviations) > 0 {
			for iNdEx := len(x.SignalDeviations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SignalDeviations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.FeePayer) > 0 {
			i -= len(x.FeePayer)
			copy(dAtA[i:], x.FeePayer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeePayer)))
			i--
			dAtA[i] = 0x22
		}
		if x.Route != nil {
			encoded, err := options.Marshal(x.Route)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Tunnel)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Tunnel: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Tunnel: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Route == nil {
					x.Route = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Route); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeePayer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignalDeviations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignalDeviations = append(x.SignalDeviations, &SignalDeviation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SignalDeviations[len(x.SignalDeviations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
				}
				x.Interval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Interval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalDeposit = append(x.TotalDeposit, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalDeposit[len(x.TotalDeposit)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsActive = bool(v != 0)
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				x.CreatedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAt |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_LatestPrices_2_list)(nil)

type _LatestPrices_2_list struct {
	list *[]*v1beta11.Price
}

func (x *_LatestPrices_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LatestPrices_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_LatestPrices_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	(*x.list)[i] = concreteValue
}

func (x *_LatestPrices_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	*x.list = append(*x.list, concreteValue)
}

func (x *_LatestPrices_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta11.Price)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LatestPrices_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_LatestPrices_2_list) NewElement() protoreflect.Value {
	v := new(v1beta11.Price)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LatestPrices_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_LatestPrices               protoreflect.MessageDescriptor
	fd_LatestPrices_tunnel_id     protoreflect.FieldDescriptor
	fd_LatestPrices_prices        protoreflect.FieldDescriptor
	fd_LatestPrices_last_interval protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_LatestPrices = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("LatestPrices")
	fd_LatestPrices_tunnel_id = md_LatestPrices.Fields().ByName("tunnel_id")
	fd_LatestPrices_prices = md_LatestPrices.Fields().ByName("prices")
	fd_LatestPrices_last_interval = md_LatestPrices.Fields().ByName("last_interval")
}

var _ protoreflect.Message = (*fastReflection_LatestPrices)(nil)

type fastReflection_LatestPrices LatestPrices

func (x *LatestPrices) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LatestPrices)(x)
}

func (x *LatestPrices) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LatestPrices_messageType fastReflection_LatestPrices_messageType
var _ protoreflect.MessageType = fastReflection_LatestPrices_messageType{}

type fastReflection_LatestPrices_messageType struct{}

func (x fastReflection_LatestPrices_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LatestPrices)(nil)
}
func (x fastReflection_LatestPrices_messageType) New() protoreflect.Message {
	return new(fastReflection_LatestPrices)
}
func (x fastReflection_LatestPrices_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LatestPrices
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LatestPrices) Descriptor() protoreflect.MessageDescriptor {
	return md_LatestPrices
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LatestPrices) Type() protoreflect.MessageType {
	return _fastReflection_LatestPrices_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LatestPrices) New() protoreflect.Message {
	return new(fastReflection_LatestPrices)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LatestPrices) Interface() protoreflect.ProtoMessage {
	return (*LatestPrices)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LatestPrices) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TunnelId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TunnelId)
		if !f(fd_LatestPrices_tunnel_id, value) {
			return
		}
	}
	if len(x.Prices) != 0 {
		value := protoreflect.ValueOfList(&_LatestPrices_2_list{list: &x.Prices})
		if !f(fd_LatestPrices_prices, value) {
			return
		}
	}
	if x.LastInterval != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastInterval)
		if !f(fd_LatestPrices_last_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LatestPrices) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		return x.TunnelId != uint64(0)
	case "band.tunnel.v1beta1.LatestPrices.prices":
		return len(x.Prices) != 0
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		return x.LastInterval != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LatestPrices) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		x.TunnelId = uint64(0)
	case "band.tunnel.v1beta1.LatestPrices.prices":
		x.Prices = nil
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		x.LastInterval = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LatestPrices) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		value := x.TunnelId
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.LatestPrices.prices":
		if len(x.Prices) == 0 {
			return protoreflect.ValueOfList(&_LatestPrices_2_list{})
		}
		listValue := &_LatestPrices_2_list{list: &x.Prices}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		value := x.LastInterval
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LatestPrices) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		x.TunnelId = value.Uint()
	case "band.tunnel.v1beta1.LatestPrices.prices":
		lv := value.List()
		clv := lv.(*_LatestPrices_2_list)
		x.Prices = *clv.list
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		x.LastInterval = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LatestPrices) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.prices":
		if x.Prices == nil {
			x.Prices = []*v1beta11.Price{}
		}
		value := &_LatestPrices_2_list{list: &x.Prices}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		panic(fmt.Errorf("field tunnel_id of message band.tunnel.v1beta1.LatestPrices is not mutable"))
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		panic(fmt.Errorf("field last_interval of message band.tunnel.v1beta1.LatestPrices is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LatestPrices) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.LatestPrices.tunnel_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.LatestPrices.prices":
		list := []*v1beta11.Price{}
		return protoreflect.ValueOfList(&_LatestPrices_2_list{list: &list})
	case "band.tunnel.v1beta1.LatestPrices.last_interval":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.LatestPrices"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.LatestPrices does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LatestPrices) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.LatestPrices", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LatestPrices) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LatestPrices) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LatestPrices) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LatestPrices) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LatestPrices)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TunnelId != 0 {
			n += 1 + runtime.Sov(uint64(x.TunnelId))
		}
		if len(x.Prices) > 0 {
			for _, e := range x.Prices {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LastInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.LastInterval))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LatestPrices)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastInterval))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Prices) > 0 {
			for iNdEx := len(x.Prices) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Prices[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.TunnelId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TunnelId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LatestPrices)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LatestPrices: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LatestPrices: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TunnelId", wireType)
				}
				x.TunnelId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TunnelId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Prices = append(x.Prices, &v1beta11.Price{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Prices[len(x.Prices)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastInterval", wireType)
				}
				x.LastInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastInterval |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TotalFees_1_list)(nil)

type _TotalFees_1_list struct {
	list *[]*v1beta1.Coin
}

func (x *_TotalFees_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TotalFees_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TotalFees_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_TotalFees_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TotalFees_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TotalFees_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TotalFees_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TotalFees_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TotalFees                       protoreflect.MessageDescriptor
	fd_TotalFees_total_base_packet_fee protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_TotalFees = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("TotalFees")
	fd_TotalFees_total_base_packet_fee = md_TotalFees.Fields().ByName("total_base_packet_fee")
}

var _ protoreflect.Message = (*fastReflection_TotalFees)(nil)

type fastReflection_TotalFees TotalFees

func (x *TotalFees) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TotalFees)(x)
}

func (x *TotalFees) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TotalFees_messageType fastReflection_TotalFees_messageType
var _ protoreflect.MessageType = fastReflection_TotalFees_messageType{}

type fastReflection_TotalFees_messageType struct{}

func (x fastReflection_TotalFees_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TotalFees)(nil)
}
func (x fastReflection_TotalFees_messageType) New() protoreflect.Message {
	return new(fastReflection_TotalFees)
}
func (x fastReflection_TotalFees_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TotalFees
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TotalFees) Descriptor() protoreflect.MessageDescriptor {
	return md_TotalFees
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TotalFees) Type() protoreflect.MessageType {
	return _fastReflection_TotalFees_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TotalFees) New() protoreflect.Message {
	return new(fastReflection_TotalFees)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TotalFees) Interface() protoreflect.ProtoMessage {
	return (*TotalFees)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TotalFees) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.TotalBasePacketFee) != 0 {
		value := protoreflect.ValueOfList(&_TotalFees_1_list{list: &x.TotalBasePacketFee})
		if !f(fd_TotalFees_total_base_packet_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TotalFees) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		return len(x.TotalBasePacketFee) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalFees) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		x.TotalBasePacketFee = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TotalFees) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		if len(x.TotalBasePacketFee) == 0 {
			return protoreflect.ValueOfList(&_TotalFees_1_list{})
		}
		listValue := &_TotalFees_1_list{list: &x.TotalBasePacketFee}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalFees) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		lv := value.List()
		clv := lv.(*_TotalFees_1_list)
		x.TotalBasePacketFee = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalFees) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		if x.TotalBasePacketFee == nil {
			x.TotalBasePacketFee = []*v1beta1.Coin{}
		}
		value := &_TotalFees_1_list{list: &x.TotalBasePacketFee}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TotalFees) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TotalFees.total_base_packet_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_TotalFees_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TotalFees"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TotalFees does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TotalFees) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.TotalFees", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TotalFees) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalFees) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TotalFees) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TotalFees) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TotalFees)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.TotalBasePacketFee) > 0 {
			for _, e := range x.TotalBasePacketFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TotalFees)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalBasePacketFee) > 0 {
			for iNdEx := len(x.TotalBasePacketFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalBasePacketFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TotalFees)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TotalFees: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TotalFees: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalBasePacketFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalBasePacketFee = append(x.TotalBasePacketFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalBasePacketFee[len(x.TotalBasePacketFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Packet_3_list)(nil)

type _Packet_3_list struct {
	list *[]*v1beta11.Price
}

func (x *_Packet_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Packet_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Packet_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	(*x.list)[i] = concreteValue
}

func (x *_Packet_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Packet_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta11.Price)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Packet_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Packet_3_list) NewElement() protoreflect.Value {
	v := new(v1beta11.Price)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Packet_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Packet            protoreflect.MessageDescriptor
	fd_Packet_tunnel_id  protoreflect.FieldDescriptor
	fd_Packet_sequence   protoreflect.FieldDescriptor
	fd_Packet_prices     protoreflect.FieldDescriptor
	fd_Packet_receipt    protoreflect.FieldDescriptor
	fd_Packet_created_at protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_Packet = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("Packet")
	fd_Packet_tunnel_id = md_Packet.Fields().ByName("tunnel_id")
	fd_Packet_sequence = md_Packet.Fields().ByName("sequence")
	fd_Packet_prices = md_Packet.Fields().ByName("prices")
	fd_Packet_receipt = md_Packet.Fields().ByName("receipt")
	fd_Packet_created_at = md_Packet.Fields().ByName("created_at")
}

var _ protoreflect.Message = (*fastReflection_Packet)(nil)

type fastReflection_Packet Packet

func (x *Packet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Packet)(x)
}

func (x *Packet) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Packet_messageType fastReflection_Packet_messageType
var _ protoreflect.MessageType = fastReflection_Packet_messageType{}

type fastReflection_Packet_messageType struct{}

func (x fastReflection_Packet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Packet)(nil)
}
func (x fastReflection_Packet_messageType) New() protoreflect.Message {
	return new(fastReflection_Packet)
}
func (x fastReflection_Packet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Packet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Packet) Descriptor() protoreflect.MessageDescriptor {
	return md_Packet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Packet) Type() protoreflect.MessageType {
	return _fastReflection_Packet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Packet) New() protoreflect.Message {
	return new(fastReflection_Packet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Packet) Interface() protoreflect.ProtoMessage {
	return (*Packet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Packet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TunnelId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TunnelId)
		if !f(fd_Packet_tunnel_id, value) {
			return
		}
	}
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_Packet_sequence, value) {
			return
		}
	}
	if len(x.Prices) != 0 {
		value := protoreflect.ValueOfList(&_Packet_3_list{list: &x.Prices})
		if !f(fd_Packet_prices, value) {
			return
		}
	}
	if x.Receipt != nil {
		value := protoreflect.ValueOfMessage(x.Receipt.ProtoReflect())
		if !f(fd_Packet_receipt, value) {
			return
		}
	}
	if x.CreatedAt != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreatedAt)
		if !f(fd_Packet_created_at, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Packet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		return x.TunnelId != uint64(0)
	case "band.tunnel.v1beta1.Packet.sequence":
		return x.Sequence != uint64(0)
	case "band.tunnel.v1beta1.Packet.prices":
		return len(x.Prices) != 0
	case "band.tunnel.v1beta1.Packet.receipt":
		return x.Receipt != nil
	case "band.tunnel.v1beta1.Packet.created_at":
		return x.CreatedAt != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Packet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		x.TunnelId = uint64(0)
	case "band.tunnel.v1beta1.Packet.sequence":
		x.Sequence = uint64(0)
	case "band.tunnel.v1beta1.Packet.prices":
		x.Prices = nil
	case "band.tunnel.v1beta1.Packet.receipt":
		x.Receipt = nil
	case "band.tunnel.v1beta1.Packet.created_at":
		x.CreatedAt = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Packet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		value := x.TunnelId
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Packet.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Packet.prices":
		if len(x.Prices) == 0 {
			return protoreflect.ValueOfList(&_Packet_3_list{})
		}
		listValue := &_Packet_3_list{list: &x.Prices}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.Packet.receipt":
		value := x.Receipt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "band.tunnel.v1beta1.Packet.created_at":
		value := x.CreatedAt
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Packet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		x.TunnelId = value.Uint()
	case "band.tunnel.v1beta1.Packet.sequence":
		x.Sequence = value.Uint()
	case "band.tunnel.v1beta1.Packet.prices":
		lv := value.List()
		clv := lv.(*_Packet_3_list)
		x.Prices = *clv.list
	case "band.tunnel.v1beta1.Packet.receipt":
		x.Receipt = value.Message().Interface().(*anypb.Any)
	case "band.tunnel.v1beta1.Packet.created_at":
		x.CreatedAt = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Packet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Packet.prices":
		if x.Prices == nil {
			x.Prices = []*v1beta11.Price{}
		}
		value := &_Packet_3_list{list: &x.Prices}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Packet.receipt":
		if x.Receipt == nil {
			x.Receipt = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Receipt.ProtoReflect())
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		panic(fmt.Errorf("field tunnel_id of message band.tunnel.v1beta1.Packet is not mutable"))
	case "band.tunnel.v1beta1.Packet.sequence":
		panic(fmt.Errorf("field sequence of message band.tunnel.v1beta1.Packet is not mutable"))
	case "band.tunnel.v1beta1.Packet.created_at":
		panic(fmt.Errorf("field created_at of message band.tunnel.v1beta1.Packet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Packet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Packet.tunnel_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Packet.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Packet.prices":
		list := []*v1beta11.Price{}
		return protoreflect.ValueOfList(&_Packet_3_list{list: &list})
	case "band.tunnel.v1beta1.Packet.receipt":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "band.tunnel.v1beta1.Packet.created_at":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Packet"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Packet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Packet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.Packet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Packet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Packet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Packet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Packet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Packet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TunnelId != 0 {
			n += 1 + runtime.Sov(uint64(x.TunnelId))
		}
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if len(x.Prices) > 0 {
			for _, e := range x.Prices {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Receipt != nil {
			l = options.Size(x.Receipt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreatedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Packet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreatedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAt))
			i--
			dAtA[i] = 0x28
		}
		if x.Receipt != nil {
			encoded, err := options.Marshal(x.Receipt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Prices) > 0 {
			for iNdEx := len(x.Prices) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Prices[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x10
		}
		if x.TunnelId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TunnelId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Packet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Packet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TunnelId", wireType)
				}
				x.TunnelId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TunnelId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Prices = append(x.Prices, &v1beta11.Price{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Prices[len(x.Prices)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Receipt == nil {
					x.Receipt = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Receipt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				x.CreatedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAt |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Deposit_3_list)(nil)

type _Deposit_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Deposit_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Deposit_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Deposit_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Deposit_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Deposit_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Deposit_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Deposit_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Deposit_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Deposit           protoreflect.MessageDescriptor
	fd_Deposit_tunnel_id protoreflect.FieldDescriptor
	fd_Deposit_depositor protoreflect.FieldDescriptor
	fd_Deposit_amount    protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_Deposit = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("Deposit")
	fd_Deposit_tunnel_id = md_Deposit.Fields().ByName("tunnel_id")
	fd_Deposit_depositor = md_Deposit.Fields().ByName("depositor")
	fd_Deposit_amount = md_Deposit.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_Deposit)(nil)

type fastReflection_Deposit Deposit

func (x *Deposit) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Deposit)(x)
}

func (x *Deposit) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Deposit_messageType fastReflection_Deposit_messageType
var _ protoreflect.MessageType = fastReflection_Deposit_messageType{}

type fastReflection_Deposit_messageType struct{}

func (x fastReflection_Deposit_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Deposit)(nil)
}
func (x fastReflection_Deposit_messageType) New() protoreflect.Message {
	return new(fastReflection_Deposit)
}
func (x fastReflection_Deposit_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Deposit
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Deposit) Descriptor() protoreflect.MessageDescriptor {
	return md_Deposit
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Deposit) Type() protoreflect.MessageType {
	return _fastReflection_Deposit_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Deposit) New() protoreflect.Message {
	return new(fastReflection_Deposit)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Deposit) Interface() protoreflect.ProtoMessage {
	return (*Deposit)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Deposit) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TunnelId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TunnelId)
		if !f(fd_Deposit_tunnel_id, value) {
			return
		}
	}
	if x.Depositor != "" {
		value := protoreflect.ValueOfString(x.Depositor)
		if !f(fd_Deposit_depositor, value) {
			return
		}
	}
	if len(x.Amount) != 0 {
		value := protoreflect.ValueOfList(&_Deposit_3_list{list: &x.Amount})
		if !f(fd_Deposit_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Deposit) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		return x.TunnelId != uint64(0)
	case "band.tunnel.v1beta1.Deposit.depositor":
		return x.Depositor != ""
	case "band.tunnel.v1beta1.Deposit.amount":
		return len(x.Amount) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		x.TunnelId = uint64(0)
	case "band.tunnel.v1beta1.Deposit.depositor":
		x.Depositor = ""
	case "band.tunnel.v1beta1.Deposit.amount":
		x.Amount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Deposit) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		value := x.TunnelId
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.Deposit.depositor":
		value := x.Depositor
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.Deposit.amount":
		if len(x.Amount) == 0 {
			return protoreflect.ValueOfList(&_Deposit_3_list{})
		}
		listValue := &_Deposit_3_list{list: &x.Amount}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		x.TunnelId = value.Uint()
	case "band.tunnel.v1beta1.Deposit.depositor":
		x.Depositor = value.Interface().(string)
	case "band.tunnel.v1beta1.Deposit.amount":
		lv := value.List()
		clv := lv.(*_Deposit_3_list)
		x.Amount = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Deposit.amount":
		if x.Amount == nil {
			x.Amount = []*v1beta1.Coin{}
		}
		value := &_Deposit_3_list{list: &x.Amount}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		panic(fmt.Errorf("field tunnel_id of message band.tunnel.v1beta1.Deposit is not mutable"))
	case "band.tunnel.v1beta1.Deposit.depositor":
		panic(fmt.Errorf("field depositor of message band.tunnel.v1beta1.Deposit is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Deposit) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.Deposit.tunnel_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.Deposit.depositor":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.Deposit.amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Deposit_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.Deposit"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.Deposit does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Deposit) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.Deposit", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Deposit) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Deposit) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Deposit) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TunnelId != 0 {
			n += 1 + runtime.Sov(uint64(x.TunnelId))
		}
		l = len(x.Depositor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Amount) > 0 {
			for _, e := range x.Amount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amount) > 0 {
			for iNdEx := len(x.Amount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Depositor) > 0 {
			i -= len(x.Depositor)
			copy(dAtA[i:], x.Depositor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Depositor)))
			i--
			dAtA[i] = 0x12
		}
		if x.TunnelId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TunnelId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Deposit: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TunnelId", wireType)
				}
				x.TunnelId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TunnelId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Depositor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = append(x.Amount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount[len(x.Amount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SignalDeviation                    protoreflect.MessageDescriptor
	fd_SignalDeviation_signal_id          protoreflect.FieldDescriptor
	fd_SignalDeviation_soft_deviation_bps protoreflect.FieldDescriptor
	fd_SignalDeviation_hard_deviation_bps protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_SignalDeviation = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("SignalDeviation")
	fd_SignalDeviation_signal_id = md_SignalDeviation.Fields().ByName("signal_id")
	fd_SignalDeviation_soft_deviation_bps = md_SignalDeviation.Fields().ByName("soft_deviation_bps")
	fd_SignalDeviation_hard_deviation_bps = md_SignalDeviation.Fields().ByName("hard_deviation_bps")
}

var _ protoreflect.Message = (*fastReflection_SignalDeviation)(nil)

type fastReflection_SignalDeviation SignalDeviation

func (x *SignalDeviation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignalDeviation)(x)
}

func (x *SignalDeviation) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignalDeviation_messageType fastReflection_SignalDeviation_messageType
var _ protoreflect.MessageType = fastReflection_SignalDeviation_messageType{}

type fastReflection_SignalDeviation_messageType struct{}

func (x fastReflection_SignalDeviation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignalDeviation)(nil)
}
func (x fastReflection_SignalDeviation_messageType) New() protoreflect.Message {
	return new(fastReflection_SignalDeviation)
}
func (x fastReflection_SignalDeviation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignalDeviation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignalDeviation) Descriptor() protoreflect.MessageDescriptor {
	return md_SignalDeviation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignalDeviation) Type() protoreflect.MessageType {
	return _fastReflection_SignalDeviation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignalDeviation) New() protoreflect.Message {
	return new(fastReflection_SignalDeviation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignalDeviation) Interface() protoreflect.ProtoMessage {
	return (*SignalDeviation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignalDeviation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SignalId != "" {
		value := protoreflect.ValueOfString(x.SignalId)
		if !f(fd_SignalDeviation_signal_id, value) {
			return
		}
	}
	if x.SoftDeviationBps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SoftDeviationBps)
		if !f(fd_SignalDeviation_soft_deviation_bps, value) {
			return
		}
	}
	if x.HardDeviationBps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.HardDeviationBps)
		if !f(fd_SignalDeviation_hard_deviation_bps, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignalDeviation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		return x.SignalId != ""
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		return x.SoftDeviationBps != uint64(0)
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		return x.HardDeviationBps != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignalDeviation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		x.SignalId = ""
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		x.SoftDeviationBps = uint64(0)
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		x.HardDeviationBps = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignalDeviation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		value := x.SignalId
		return protoreflect.ValueOfString(value)
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		value := x.SoftDeviationBps
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		value := x.HardDeviationBps
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignalDeviation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		x.SignalId = value.Interface().(string)
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		x.SoftDeviationBps = value.Uint()
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		x.HardDeviationBps = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignalDeviation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		panic(fmt.Errorf("field signal_id of message band.tunnel.v1beta1.SignalDeviation is not mutable"))
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		panic(fmt.Errorf("field soft_deviation_bps of message band.tunnel.v1beta1.SignalDeviation is not mutable"))
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		panic(fmt.Errorf("field hard_deviation_bps of message band.tunnel.v1beta1.SignalDeviation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignalDeviation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.SignalDeviation.signal_id":
		return protoreflect.ValueOfString("")
	case "band.tunnel.v1beta1.SignalDeviation.soft_deviation_bps":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.SignalDeviation.hard_deviation_bps":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.SignalDeviation"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.SignalDeviation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignalDeviation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.SignalDeviation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignalDeviation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignalDeviation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignalDeviation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignalDeviation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignalDeviation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SignalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SoftDeviationBps != 0 {
			n += 1 + runtime.Sov(uint64(x.SoftDeviationBps))
		}
		if x.HardDeviationBps != 0 {
			n += 1 + runtime.Sov(uint64(x.HardDeviationBps))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignalDeviation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.HardDeviationBps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.HardDeviationBps))
			i--
			dAtA[i] = 0x18
		}
		if x.SoftDeviationBps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SoftDeviationBps))
			i--
			dAtA[i] = 0x10
		}
		if len(x.SignalId) > 0 {
			i -= len(x.SignalId)
			copy(dAtA[i:], x.SignalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignalId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignalDeviation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignalDeviation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignalDeviation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SoftDeviationBps", wireType)
				}
				x.SoftDeviationBps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SoftDeviationBps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HardDeviationBps", wireType)
				}
				x.HardDeviationBps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.HardDeviationBps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TunnelSignatureOrder_2_list)(nil)

type _TunnelSignatureOrder_2_list struct {
	list *[]*v1beta11.Price
}

func (x *_TunnelSignatureOrder_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TunnelSignatureOrder_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TunnelSignatureOrder_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	(*x.list)[i] = concreteValue
}

func (x *_TunnelSignatureOrder_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Price)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TunnelSignatureOrder_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta11.Price)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TunnelSignatureOrder_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TunnelSignatureOrder_2_list) NewElement() protoreflect.Value {
	v := new(v1beta11.Price)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TunnelSignatureOrder_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TunnelSignatureOrder            protoreflect.MessageDescriptor
	fd_TunnelSignatureOrder_sequence   protoreflect.FieldDescriptor
	fd_TunnelSignatureOrder_prices     protoreflect.FieldDescriptor
	fd_TunnelSignatureOrder_created_at protoreflect.FieldDescriptor
	fd_TunnelSignatureOrder_encoder    protoreflect.FieldDescriptor
)

func init() {
	file_band_tunnel_v1beta1_tunnel_proto_init()
	md_TunnelSignatureOrder = File_band_tunnel_v1beta1_tunnel_proto.Messages().ByName("TunnelSignatureOrder")
	fd_TunnelSignatureOrder_sequence = md_TunnelSignatureOrder.Fields().ByName("sequence")
	fd_TunnelSignatureOrder_prices = md_TunnelSignatureOrder.Fields().ByName("prices")
	fd_TunnelSignatureOrder_created_at = md_TunnelSignatureOrder.Fields().ByName("created_at")
	fd_TunnelSignatureOrder_encoder = md_TunnelSignatureOrder.Fields().ByName("encoder")
}

var _ protoreflect.Message = (*fastReflection_TunnelSignatureOrder)(nil)

type fastReflection_TunnelSignatureOrder TunnelSignatureOrder

func (x *TunnelSignatureOrder) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TunnelSignatureOrder)(x)
}

func (x *TunnelSignatureOrder) slowProtoReflect() protoreflect.Message {
	mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TunnelSignatureOrder_messageType fastReflection_TunnelSignatureOrder_messageType
var _ protoreflect.MessageType = fastReflection_TunnelSignatureOrder_messageType{}

type fastReflection_TunnelSignatureOrder_messageType struct{}

func (x fastReflection_TunnelSignatureOrder_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TunnelSignatureOrder)(nil)
}
func (x fastReflection_TunnelSignatureOrder_messageType) New() protoreflect.Message {
	return new(fastReflection_TunnelSignatureOrder)
}
func (x fastReflection_TunnelSignatureOrder_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TunnelSignatureOrder
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TunnelSignatureOrder) Descriptor() protoreflect.MessageDescriptor {
	return md_TunnelSignatureOrder
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TunnelSignatureOrder) Type() protoreflect.MessageType {
	return _fastReflection_TunnelSignatureOrder_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TunnelSignatureOrder) New() protoreflect.Message {
	return new(fastReflection_TunnelSignatureOrder)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TunnelSignatureOrder) Interface() protoreflect.ProtoMessage {
	return (*TunnelSignatureOrder)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TunnelSignatureOrder) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Sequence)
		if !f(fd_TunnelSignatureOrder_sequence, value) {
			return
		}
	}
	if len(x.Prices) != 0 {
		value := protoreflect.ValueOfList(&_TunnelSignatureOrder_2_list{list: &x.Prices})
		if !f(fd_TunnelSignatureOrder_prices, value) {
			return
		}
	}
	if x.CreatedAt != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreatedAt)
		if !f(fd_TunnelSignatureOrder_created_at, value) {
			return
		}
	}
	if x.Encoder != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Encoder))
		if !f(fd_TunnelSignatureOrder_encoder, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TunnelSignatureOrder) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		return x.Sequence != uint64(0)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		return len(x.Prices) != 0
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		return x.CreatedAt != int64(0)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		return x.Encoder != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TunnelSignatureOrder) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		x.Sequence = uint64(0)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		x.Prices = nil
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		x.CreatedAt = int64(0)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		x.Encoder = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TunnelSignatureOrder) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		value := x.Sequence
		return protoreflect.ValueOfUint64(value)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		if len(x.Prices) == 0 {
			return protoreflect.ValueOfList(&_TunnelSignatureOrder_2_list{})
		}
		listValue := &_TunnelSignatureOrder_2_list{list: &x.Prices}
		return protoreflect.ValueOfList(listValue)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		value := x.CreatedAt
		return protoreflect.ValueOfInt64(value)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		value := x.Encoder
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TunnelSignatureOrder) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		x.Sequence = value.Uint()
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		lv := value.List()
		clv := lv.(*_TunnelSignatureOrder_2_list)
		x.Prices = *clv.list
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		x.CreatedAt = value.Int()
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		x.Encoder = (v1beta11.Encoder)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TunnelSignatureOrder) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		if x.Prices == nil {
			x.Prices = []*v1beta11.Price{}
		}
		value := &_TunnelSignatureOrder_2_list{list: &x.Prices}
		return protoreflect.ValueOfList(value)
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		panic(fmt.Errorf("field sequence of message band.tunnel.v1beta1.TunnelSignatureOrder is not mutable"))
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		panic(fmt.Errorf("field created_at of message band.tunnel.v1beta1.TunnelSignatureOrder is not mutable"))
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		panic(fmt.Errorf("field encoder of message band.tunnel.v1beta1.TunnelSignatureOrder is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TunnelSignatureOrder) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "band.tunnel.v1beta1.TunnelSignatureOrder.sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	case "band.tunnel.v1beta1.TunnelSignatureOrder.prices":
		list := []*v1beta11.Price{}
		return protoreflect.ValueOfList(&_TunnelSignatureOrder_2_list{list: &list})
	case "band.tunnel.v1beta1.TunnelSignatureOrder.created_at":
		return protoreflect.ValueOfInt64(int64(0))
	case "band.tunnel.v1beta1.TunnelSignatureOrder.encoder":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: band.tunnel.v1beta1.TunnelSignatureOrder"))
		}
		panic(fmt.Errorf("message band.tunnel.v1beta1.TunnelSignatureOrder does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TunnelSignatureOrder) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in band.tunnel.v1beta1.TunnelSignatureOrder", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TunnelSignatureOrder) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TunnelSignatureOrder) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TunnelSignatureOrder) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TunnelSignatureOrder) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TunnelSignatureOrder)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.Sequence))
		}
		if len(x.Prices) > 0 {
			for _, e := range x.Prices {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CreatedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAt))
		}
		if x.Encoder != 0 {
			n += 1 + runtime.Sov(uint64(x.Encoder))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TunnelSignatureOrder)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Encoder != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Encoder))
			i--
			dAtA[i] = 0x20
		}
		if x.CreatedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAt))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Prices) > 0 {
			for iNdEx := len(x.Prices) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Prices[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Sequence))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TunnelSignatureOrder)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TunnelSignatureOrder: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TunnelSignatureOrder: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
				}
				x.Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Prices = append(x.Prices, &v1beta11.Price{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Prices[len(x.Prices)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				x.CreatedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAt |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Encoder", wireType)
				}
				x.Encoder = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Encoder |= v1beta11.Encoder(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: band/tunnel/v1beta1/tunnel.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tunnel contains the information of the tunnel that is created by the user
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the tunnel ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sequence is representing the sequence of the tunnel packet.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// route is the route for delivering the signal prices
	Route *anypb.Any `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	// fee_payer is the address of the fee payer
	FeePayer string `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	// signal_deviations is the list of signal deviations
	SignalDeviations []*SignalDeviation `protobuf:"bytes,5,rep,name=signal_deviations,json=signalDeviations,proto3" json:"signal_deviations,omitempty"`
	// interval is the interval for delivering the signal prices
	Interval uint64 `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
	// total_deposit is the total deposit on the tunnel.
	TotalDeposit []*v1beta1.Coin `protobuf:"bytes,7,rep,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit,omitempty"`
	// is_active is the flag to indicate if the tunnel is active
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// created_at is the timestamp when the tunnel is created
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// creator is the address of the creator
	Creator string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *Tunnel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tunnel) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Tunnel) GetRoute() *anypb.Any {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Tunnel) GetFeePayer() string {
	if x != nil {
		return x.FeePayer
	}
	return ""
}

func (x *Tunnel) GetSignalDeviations() []*SignalDeviation {
	if x != nil {
		return x.SignalDeviations
	}
	return nil
}

func (x *Tunnel) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Tunnel) GetTotalDeposit() []*v1beta1.Coin {
	if x != nil {
		return x.TotalDeposit
	}
	return nil
}

func (x *Tunnel) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Tunnel) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Tunnel) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

// LatestPrices is the type for prices that tunnel produces
type LatestPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel_id is the tunnel ID
	TunnelId uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// prices is the list of prices information from feeds module.
	Prices []*v1beta11.Price `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices,omitempty"`
	// last_interval is the last interval when the signal prices are produced by interval trigger
	LastInterval int64 `protobuf:"varint,3,opt,name=last_interval,json=lastInterval,proto3" json:"last_interval,omitempty"`
}

func (x *LatestPrices) Reset() {
	*x = LatestPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestPrices) ProtoMessage() {}

// Deprecated: Use LatestPrices.ProtoReflect.Descriptor instead.
func (*LatestPrices) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *LatestPrices) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *LatestPrices) GetPrices() []*v1beta11.Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *LatestPrices) GetLastInterval() int64 {
	if x != nil {
		return x.LastInterval
	}
	return 0
}

// TotalFees is the type for the total fees collected by the tunnel
type TotalFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total_base_packet_fee is the total base packet fee collected by the tunnel
	TotalBasePacketFee []*v1beta1.Coin `protobuf:"bytes,1,rep,name=total_base_packet_fee,json=totalBasePacketFee,proto3" json:"total_base_packet_fee,omitempty"`
}

func (x *TotalFees) Reset() {
	*x = TotalFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalFees) ProtoMessage() {}

// Deprecated: Use TotalFees.ProtoReflect.Descriptor instead.
func (*TotalFees) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *TotalFees) GetTotalBasePacketFee() []*v1beta1.Coin {
	if x != nil {
		return x.TotalBasePacketFee
	}
	return nil
}

// Packet is the packet that tunnel produces
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel_id is the tunnel ID
	TunnelId uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// sequence is representing the sequence of the tunnel packet.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// prices is the list of prices information from feeds module.
	Prices []*v1beta11.Price `protobuf:"bytes,3,rep,name=prices,proto3" json:"prices,omitempty"`
	// receipt represents the confirmation of the packet delivery to the destination via the specified route.
	Receipt *anypb.Any `protobuf:"bytes,4,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// created_at is the timestamp when the packet is created
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *Packet) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *Packet) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Packet) GetPrices() []*v1beta11.Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *Packet) GetReceipt() *anypb.Any {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *Packet) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// Deposit defines an amount deposited by an account address to the tunnel.
type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel_id defines the unique id of the tunnel.
	TunnelId uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// depositor defines the deposit addresses from the proposals.
	Depositor string `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// amount to be deposited by depositor.
	Amount []*v1beta1.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *Deposit) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *Deposit) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *Deposit) GetAmount() []*v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

// SignalDeviation is the type for a signal with soft and hard deviation
type SignalDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signal_id is the signal ID
	SignalId string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// soft_deviation_bps is the soft deviation in basis points
	SoftDeviationBps uint64 `protobuf:"varint,2,opt,name=soft_deviation_bps,json=softDeviationBps,proto3" json:"soft_deviation_bps,omitempty"`
	// hard_deviation_bps is the hard deviation in basis points
	HardDeviationBps uint64 `protobuf:"varint,3,opt,name=hard_deviation_bps,json=hardDeviationBps,proto3" json:"hard_deviation_bps,omitempty"`
}

func (x *SignalDeviation) Reset() {
	*x = SignalDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalDeviation) ProtoMessage() {}

// Deprecated: Use SignalDeviation.ProtoReflect.Descriptor instead.
func (*SignalDeviation) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *SignalDeviation) GetSignalId() string {
	if x != nil {
		return x.SignalId
	}
	return ""
}

func (x *SignalDeviation) GetSoftDeviationBps() uint64 {
	if x != nil {
		return x.SoftDeviationBps
	}
	return 0
}

func (x *SignalDeviation) GetHardDeviationBps() uint64 {
	if x != nil {
		return x.HardDeviationBps
	}
	return 0
}

// TunnelSignatureOrder defines a general signature order for sending signature to tss group.
type TunnelSignatureOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence is the sequence of the packet
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// prices is the list of prices information from feeds module.
	Prices []*v1beta11.Price `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices,omitempty"`
	// created_at is the timestamp when the packet is created
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// encoder is the mode of encoding data.
	Encoder v1beta11.Encoder `protobuf:"varint,4,opt,name=encoder,proto3,enum=band.feeds.v1beta1.Encoder" json:"encoder,omitempty"`
}

func (x *TunnelSignatureOrder) Reset() {
	*x = TunnelSignatureOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_band_tunnel_v1beta1_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelSignatureOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelSignatureOrder) ProtoMessage() {}

// Deprecated: Use TunnelSignatureOrder.ProtoReflect.Descriptor instead.
func (*TunnelSignatureOrder) Descriptor() ([]byte, []int) {
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelSignatureOrder) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TunnelSignatureOrder) GetPrices() []*v1beta11.Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TunnelSignatureOrder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TunnelSignatureOrder) GetEncoder() v1beta11.Encoder {
	if x != nil {
		return x.Encoder
	}
	return v1beta11.Encoder(0)
}

var File_band_tunnel_v1beta1_tunnel_proto protoreflect.FileDescriptor

var file_band_tunnel_v1beta1_tunnel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x66,
	0x65, 0x65, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x04, 0x0a, 0x06, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x0a, 0xca, 0xb4,
	0x2d, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x35, 0xc8,
	0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0xe2, 0xde,
	0x1f, 0x08, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xeb, 0x01, 0x0a,
	0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x12,
	0xca, 0xb4, 0x2d, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x49, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x35, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x50, 0x53, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x12,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x48, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x50, 0x53, 0x52, 0x10,
	0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x70, 0x73,
	0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61,
	0x6e, 0x64, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00,
	0x42, 0xe0, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x54, 0x58, 0xaa, 0x02, 0x13, 0x42, 0x61, 0x6e, 0x64,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca,
	0x02, 0x13, 0x42, 0x61, 0x6e, 0x64, 0x5c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x42, 0x61, 0x6e, 0x64, 0x5c, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x42, 0x61, 0x6e, 0x64, 0x3a, 0x3a,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa8,
	0xe2, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_band_tunnel_v1beta1_tunnel_proto_rawDescOnce sync.Once
	file_band_tunnel_v1beta1_tunnel_proto_rawDescData = file_band_tunnel_v1beta1_tunnel_proto_rawDesc
)

func file_band_tunnel_v1beta1_tunnel_proto_rawDescGZIP() []byte {
	file_band_tunnel_v1beta1_tunnel_proto_rawDescOnce.Do(func() {
		file_band_tunnel_v1beta1_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_band_tunnel_v1beta1_tunnel_proto_rawDescData)
	})
	return file_band_tunnel_v1beta1_tunnel_proto_rawDescData
}

var file_band_tunnel_v1beta1_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_band_tunnel_v1beta1_tunnel_proto_goTypes = []interface{}{
	(*Tunnel)(nil),               // 0: band.tunnel.v1beta1.Tunnel
	(*LatestPrices)(nil),         // 1: band.tunnel.v1beta1.LatestPrices
	(*TotalFees)(nil),            // 2: band.tunnel.v1beta1.TotalFees
	(*Packet)(nil),               // 3: band.tunnel.v1beta1.Packet
	(*Deposit)(nil),              // 4: band.tunnel.v1beta1.Deposit
	(*SignalDeviation)(nil),      // 5: band.tunnel.v1beta1.SignalDeviation
	(*TunnelSignatureOrder)(nil), // 6: band.tunnel.v1beta1.TunnelSignatureOrder
	(*anypb.Any)(nil),            // 7: google.protobuf.Any
	(*v1beta1.Coin)(nil),         // 8: cosmos.base.v1beta1.Coin
	(*v1beta11.Price)(nil),       // 9: band.feeds.v1beta1.Price
	(v1beta11.Encoder)(0),        // 10: band.feeds.v1beta1.Encoder
}
var file_band_tunnel_v1beta1_tunnel_proto_depIdxs = []int32{
	7,  // 0: band.tunnel.v1beta1.Tunnel.route:type_name -> google.protobuf.Any
	5,  // 1: band.tunnel.v1beta1.Tunnel.signal_deviations:type_name -> band.tunnel.v1beta1.SignalDeviation
	8,  // 2: band.tunnel.v1beta1.Tunnel.total_deposit:type_name -> cosmos.base.v1beta1.Coin
	9,  // 3: band.tunnel.v1beta1.LatestPrices.prices:type_name -> band.feeds.v1beta1.Price
	8,  // 4: band.tunnel.v1beta1.TotalFees.total_base_packet_fee:type_name -> cosmos.base.v1beta1.Coin
	9,  // 5: band.tunnel.v1beta1.Packet.prices:type_name -> band.feeds.v1beta1.Price
	7,  // 6: band.tunnel.v1beta1.Packet.receipt:type_name -> google.protobuf.Any
	8,  // 7: band.tunnel.v1beta1.Deposit.amount:type_name -> cosmos.base.v1beta1.Coin
	9,  // 8: band.tunnel.v1beta1.TunnelSignatureOrder.prices:type_name -> band.feeds.v1beta1.Price
	10, // 9: band.tunnel.v1beta1.TunnelSignatureOrder.encoder:type_name -> band.feeds.v1beta1.Encoder
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_band_tunnel_v1beta1_tunnel_proto_init() }
func file_band_tunnel_v1beta1_tunnel_proto_init() {
	if File_band_tunnel_v1beta1_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_band_tunnel_v1beta1_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelSignatureOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_band_tunnel_v1beta1_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_band_tunnel_v1beta1_tunnel_proto_goTypes,
		DependencyIndexes: file_band_tunnel_v1beta1_tunnel_proto_depIdxs,
		MessageInfos:      file_band_tunnel_v1beta1_tunnel_proto_msgTypes,
	}.Build()
	File_band_tunnel_v1beta1_tunnel_proto = out.File
	file_band_tunnel_v1beta1_tunnel_proto_rawDesc = nil
	file_band_tunnel_v1beta1_tunnel_proto_goTypes = nil
	file_band_tunnel_v1beta1_tunnel_proto_depIdxs = nil
}
